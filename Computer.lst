                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module Computer
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _SaveNumber_PARM_3
                                     12 	.globl _SaveNumber_PARM_2
                                     13 	.globl _Restart_PARM_7
                                     14 	.globl _Restart_PARM_6
                                     15 	.globl _Restart_PARM_5
                                     16 	.globl _Restart_PARM_4
                                     17 	.globl _Restart_PARM_3
                                     18 	.globl _Restart_PARM_2
                                     19 	.globl _main
                                     20 	.globl _clean
                                     21 	.globl _Base_timer
                                     22 	.globl _Base_init
                                     23 	.globl _Keypad_Debounce
                                     24 	.globl _Keypad_Debounce_init
                                     25 	.globl _Calculate
                                     26 	.globl _Update_Expression
                                     27 	.globl _SaveNumber
                                     28 	.globl _Restart
                                     29 	.globl _Counter
                                     30 	.globl _Show_History
                                     31 	.globl _Show_Ans
                                     32 	.globl _Show
                                     33 	.globl _ReadKeypad
                                     34 	.globl _Keypad_flag
                                     35 	.globl _cal_flag
                                     36 	.globl _CY
                                     37 	.globl _AC
                                     38 	.globl _F0
                                     39 	.globl _RS1
                                     40 	.globl _RS0
                                     41 	.globl _OV
                                     42 	.globl _F1
                                     43 	.globl _P
                                     44 	.globl _PS
                                     45 	.globl _PT1
                                     46 	.globl _PX1
                                     47 	.globl _PT0
                                     48 	.globl _PX0
                                     49 	.globl _RD
                                     50 	.globl _WR
                                     51 	.globl _T1
                                     52 	.globl _T0
                                     53 	.globl _INT1
                                     54 	.globl _INT0
                                     55 	.globl _TXD
                                     56 	.globl _RXD
                                     57 	.globl _P3_7
                                     58 	.globl _P3_6
                                     59 	.globl _P3_5
                                     60 	.globl _P3_4
                                     61 	.globl _P3_3
                                     62 	.globl _P3_2
                                     63 	.globl _P3_1
                                     64 	.globl _P3_0
                                     65 	.globl _EA
                                     66 	.globl _ES
                                     67 	.globl _ET1
                                     68 	.globl _EX1
                                     69 	.globl _ET0
                                     70 	.globl _EX0
                                     71 	.globl _P2_7
                                     72 	.globl _P2_6
                                     73 	.globl _P2_5
                                     74 	.globl _P2_4
                                     75 	.globl _P2_3
                                     76 	.globl _P2_2
                                     77 	.globl _P2_1
                                     78 	.globl _P2_0
                                     79 	.globl _SM0
                                     80 	.globl _SM1
                                     81 	.globl _SM2
                                     82 	.globl _REN
                                     83 	.globl _TB8
                                     84 	.globl _RB8
                                     85 	.globl _TI
                                     86 	.globl _RI
                                     87 	.globl _P1_7
                                     88 	.globl _P1_6
                                     89 	.globl _P1_5
                                     90 	.globl _P1_4
                                     91 	.globl _P1_3
                                     92 	.globl _P1_2
                                     93 	.globl _P1_1
                                     94 	.globl _P1_0
                                     95 	.globl _TF1
                                     96 	.globl _TR1
                                     97 	.globl _TF0
                                     98 	.globl _TR0
                                     99 	.globl _IE1
                                    100 	.globl _IT1
                                    101 	.globl _IE0
                                    102 	.globl _IT0
                                    103 	.globl _P0_7
                                    104 	.globl _P0_6
                                    105 	.globl _P0_5
                                    106 	.globl _P0_4
                                    107 	.globl _P0_3
                                    108 	.globl _P0_2
                                    109 	.globl _P0_1
                                    110 	.globl _P0_0
                                    111 	.globl _B
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _IP
                                    115 	.globl _P3
                                    116 	.globl _IE
                                    117 	.globl _P2
                                    118 	.globl _SBUF
                                    119 	.globl _SCON
                                    120 	.globl _P1
                                    121 	.globl _TH1
                                    122 	.globl _TH0
                                    123 	.globl _TL1
                                    124 	.globl _TL0
                                    125 	.globl _TMOD
                                    126 	.globl _TCON
                                    127 	.globl _PCON
                                    128 	.globl _DPH
                                    129 	.globl _DPL
                                    130 	.globl _SP
                                    131 	.globl _P0
                                    132 	.globl _base_flag
                                    133 	.globl _start
                                    134 	.globl _history_count
                                    135 	.globl _base_index
                                    136 	.globl _negative_base
                                    137 	.globl _Base_num
                                    138 	.globl _history_start
                                    139 	.globl _history
                                    140 	.globl _flag
                                    141 	.globl _buffer
                                    142 	.globl _Calculate_PARM_6
                                    143 	.globl _Calculate_PARM_5
                                    144 	.globl _Calculate_PARM_4
                                    145 	.globl _Calculate_PARM_3
                                    146 	.globl _Calculate_PARM_2
                                    147 	.globl _Update_Expression_PARM_5
                                    148 	.globl _Update_Expression_PARM_4
                                    149 	.globl _Update_Expression_PARM_3
                                    150 	.globl _Update_Expression_PARM_2
                                    151 	.globl _num1_counter
                                    152 	.globl _number
                                    153 	.globl _timer_count
                                    154 ;--------------------------------------------------------
                                    155 ; special function registers
                                    156 ;--------------------------------------------------------
                                    157 	.area RSEG    (ABS,DATA)
      000000                        158 	.org 0x0000
                           000080   159 _P0	=	0x0080
                           000081   160 _SP	=	0x0081
                           000082   161 _DPL	=	0x0082
                           000083   162 _DPH	=	0x0083
                           000087   163 _PCON	=	0x0087
                           000088   164 _TCON	=	0x0088
                           000089   165 _TMOD	=	0x0089
                           00008A   166 _TL0	=	0x008a
                           00008B   167 _TL1	=	0x008b
                           00008C   168 _TH0	=	0x008c
                           00008D   169 _TH1	=	0x008d
                           000090   170 _P1	=	0x0090
                           000098   171 _SCON	=	0x0098
                           000099   172 _SBUF	=	0x0099
                           0000A0   173 _P2	=	0x00a0
                           0000A8   174 _IE	=	0x00a8
                           0000B0   175 _P3	=	0x00b0
                           0000B8   176 _IP	=	0x00b8
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000F0   179 _B	=	0x00f0
                                    180 ;--------------------------------------------------------
                                    181 ; special function bits
                                    182 ;--------------------------------------------------------
                                    183 	.area RSEG    (ABS,DATA)
      000000                        184 	.org 0x0000
                           000080   185 _P0_0	=	0x0080
                           000081   186 _P0_1	=	0x0081
                           000082   187 _P0_2	=	0x0082
                           000083   188 _P0_3	=	0x0083
                           000084   189 _P0_4	=	0x0084
                           000085   190 _P0_5	=	0x0085
                           000086   191 _P0_6	=	0x0086
                           000087   192 _P0_7	=	0x0087
                           000088   193 _IT0	=	0x0088
                           000089   194 _IE0	=	0x0089
                           00008A   195 _IT1	=	0x008a
                           00008B   196 _IE1	=	0x008b
                           00008C   197 _TR0	=	0x008c
                           00008D   198 _TF0	=	0x008d
                           00008E   199 _TR1	=	0x008e
                           00008F   200 _TF1	=	0x008f
                           000090   201 _P1_0	=	0x0090
                           000091   202 _P1_1	=	0x0091
                           000092   203 _P1_2	=	0x0092
                           000093   204 _P1_3	=	0x0093
                           000094   205 _P1_4	=	0x0094
                           000095   206 _P1_5	=	0x0095
                           000096   207 _P1_6	=	0x0096
                           000097   208 _P1_7	=	0x0097
                           000098   209 _RI	=	0x0098
                           000099   210 _TI	=	0x0099
                           00009A   211 _RB8	=	0x009a
                           00009B   212 _TB8	=	0x009b
                           00009C   213 _REN	=	0x009c
                           00009D   214 _SM2	=	0x009d
                           00009E   215 _SM1	=	0x009e
                           00009F   216 _SM0	=	0x009f
                           0000A0   217 _P2_0	=	0x00a0
                           0000A1   218 _P2_1	=	0x00a1
                           0000A2   219 _P2_2	=	0x00a2
                           0000A3   220 _P2_3	=	0x00a3
                           0000A4   221 _P2_4	=	0x00a4
                           0000A5   222 _P2_5	=	0x00a5
                           0000A6   223 _P2_6	=	0x00a6
                           0000A7   224 _P2_7	=	0x00a7
                           0000A8   225 _EX0	=	0x00a8
                           0000A9   226 _ET0	=	0x00a9
                           0000AA   227 _EX1	=	0x00aa
                           0000AB   228 _ET1	=	0x00ab
                           0000AC   229 _ES	=	0x00ac
                           0000AF   230 _EA	=	0x00af
                           0000B0   231 _P3_0	=	0x00b0
                           0000B1   232 _P3_1	=	0x00b1
                           0000B2   233 _P3_2	=	0x00b2
                           0000B3   234 _P3_3	=	0x00b3
                           0000B4   235 _P3_4	=	0x00b4
                           0000B5   236 _P3_5	=	0x00b5
                           0000B6   237 _P3_6	=	0x00b6
                           0000B7   238 _P3_7	=	0x00b7
                           0000B0   239 _RXD	=	0x00b0
                           0000B1   240 _TXD	=	0x00b1
                           0000B2   241 _INT0	=	0x00b2
                           0000B3   242 _INT1	=	0x00b3
                           0000B4   243 _T0	=	0x00b4
                           0000B5   244 _T1	=	0x00b5
                           0000B6   245 _WR	=	0x00b6
                           0000B7   246 _RD	=	0x00b7
                           0000B8   247 _PX0	=	0x00b8
                           0000B9   248 _PT0	=	0x00b9
                           0000BA   249 _PX1	=	0x00ba
                           0000BB   250 _PT1	=	0x00bb
                           0000BC   251 _PS	=	0x00bc
                           0000D0   252 _P	=	0x00d0
                           0000D1   253 _F1	=	0x00d1
                           0000D2   254 _OV	=	0x00d2
                           0000D3   255 _RS0	=	0x00d3
                           0000D4   256 _RS1	=	0x00d4
                           0000D5   257 _F0	=	0x00d5
                           0000D6   258 _AC	=	0x00d6
                           0000D7   259 _CY	=	0x00d7
      000000                        260 _cal_flag::
      000000                        261 	.ds 1
      000001                        262 _Keypad_flag::
      000001                        263 	.ds 1
                                    264 ;--------------------------------------------------------
                                    265 ; overlayable register banks
                                    266 ;--------------------------------------------------------
                                    267 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        268 	.ds 8
                                    269 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        270 	.ds 8
                                    271 	.area REG_BANK_2	(REL,OVR,DATA)
      000000                        272 	.ds 8
                                    273 ;--------------------------------------------------------
                                    274 ; internal ram data
                                    275 ;--------------------------------------------------------
                                    276 	.area DSEG    (DATA)
      000000                        277 _timer_count::
      000000                        278 	.ds 1
      000001                        279 _number::
      000001                        280 	.ds 1
      000002                        281 _num1_counter::
      000002                        282 	.ds 1
      000003                        283 _Update_Expression_PARM_2:
      000003                        284 	.ds 3
      000006                        285 _Update_Expression_PARM_3:
      000006                        286 	.ds 3
      000009                        287 _Update_Expression_PARM_4:
      000009                        288 	.ds 3
      00000C                        289 _Update_Expression_PARM_5:
      00000C                        290 	.ds 3
      00000F                        291 _Update_Expression_num_1_10000_13:
      00000F                        292 	.ds 3
      000012                        293 _Update_Expression_sloc0_1_0:
      000012                        294 	.ds 3
      000015                        295 _Calculate_PARM_2:
      000015                        296 	.ds 2
      000017                        297 _Calculate_PARM_3:
      000017                        298 	.ds 1
      000018                        299 _Calculate_PARM_4:
      000018                        300 	.ds 2
      00001A                        301 _Calculate_PARM_5:
      00001A                        302 	.ds 2
      00001C                        303 _Calculate_PARM_6:
      00001C                        304 	.ds 3
      00001F                        305 _Calculate_sloc0_1_0:
      00001F                        306 	.ds 2
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable items in internal ram
                                    309 ;--------------------------------------------------------
                                    310 	.area	OSEG    (OVR,DATA)
      000000                        311 _Restart_PARM_2:
      000000                        312 	.ds 3
      000003                        313 _Restart_PARM_3:
      000003                        314 	.ds 3
      000006                        315 _Restart_PARM_4:
      000006                        316 	.ds 3
      000009                        317 _Restart_PARM_5:
      000009                        318 	.ds 3
      00000C                        319 _Restart_PARM_6:
      00000C                        320 	.ds 3
      00000F                        321 _Restart_PARM_7:
      00000F                        322 	.ds 3
                                    323 	.area	OSEG    (OVR,DATA)
      000000                        324 _SaveNumber_PARM_2:
      000000                        325 	.ds 1
      000001                        326 _SaveNumber_PARM_3:
      000001                        327 	.ds 3
                                    328 	.area	OSEG    (OVR,DATA)
                                    329 ;--------------------------------------------------------
                                    330 ; Stack segment in internal ram
                                    331 ;--------------------------------------------------------
                                    332 	.area SSEG
      000000                        333 __start__stack:
      000000                        334 	.ds	1
                                    335 
                                    336 ;--------------------------------------------------------
                                    337 ; indirectly addressable internal ram data
                                    338 ;--------------------------------------------------------
                                    339 	.area ISEG    (DATA)
      000000                        340 _buffer::
      000000                        341 	.ds 8
      000008                        342 _flag::
      000008                        343 	.ds 1
      000009                        344 _history::
      000009                        345 	.ds 10
      000013                        346 _history_start::
      000013                        347 	.ds 10
      00001D                        348 _Base_num::
      00001D                        349 	.ds 10
      000027                        350 _negative_base::
      000027                        351 	.ds 5
      00002C                        352 _base_index::
      00002C                        353 	.ds 1
      00002D                        354 _history_count::
      00002D                        355 	.ds 1
      00002E                        356 _start::
      00002E                        357 	.ds 1
      00002F                        358 _base_flag::
      00002F                        359 	.ds 1
      000030                        360 _main_num_1_10000_38:
      000030                        361 	.ds 2
      000032                        362 _main_num_2_10000_38:
      000032                        363 	.ds 2
      000034                        364 _main_ans_10000_38:
      000034                        365 	.ds 2
      000036                        366 _main_op_10000_38:
      000036                        367 	.ds 1
      000037                        368 _main_negative_num1_10000_38:
      000037                        369 	.ds 2
      000039                        370 _main_negative_num2_10000_38:
      000039                        371 	.ds 2
      00003B                        372 _main_negative_ans_10000_38:
      00003B                        373 	.ds 2
                                    374 ;--------------------------------------------------------
                                    375 ; absolute internal ram data
                                    376 ;--------------------------------------------------------
                                    377 	.area IABS    (ABS,DATA)
                                    378 	.area IABS    (ABS,DATA)
                                    379 ;--------------------------------------------------------
                                    380 ; bit data
                                    381 ;--------------------------------------------------------
                                    382 	.area BSEG    (BIT)
                                    383 ;--------------------------------------------------------
                                    384 ; paged external ram data
                                    385 ;--------------------------------------------------------
                                    386 	.area PSEG    (PAG,XDATA)
                                    387 ;--------------------------------------------------------
                                    388 ; uninitialized external ram data
                                    389 ;--------------------------------------------------------
                                    390 	.area XSEG    (XDATA)
                                    391 ;--------------------------------------------------------
                                    392 ; absolute external ram data
                                    393 ;--------------------------------------------------------
                                    394 	.area XABS    (ABS,XDATA)
                                    395 ;--------------------------------------------------------
                                    396 ; initialized external ram data
                                    397 ;--------------------------------------------------------
                                    398 	.area XISEG   (XDATA)
                                    399 	.area HOME    (CODE)
                                    400 	.area GSINIT0 (CODE)
                                    401 	.area GSINIT1 (CODE)
                                    402 	.area GSINIT2 (CODE)
                                    403 	.area GSINIT3 (CODE)
                                    404 	.area GSINIT4 (CODE)
                                    405 	.area GSINIT5 (CODE)
                                    406 	.area GSINIT  (CODE)
                                    407 	.area GSFINAL (CODE)
                                    408 	.area CSEG    (CODE)
                                    409 ;--------------------------------------------------------
                                    410 ; interrupt vector
                                    411 ;--------------------------------------------------------
                                    412 	.area HOME    (CODE)
      000000                        413 __interrupt_vect:
      000000 02r00r00         [24]  414 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  415 	reti
      000004                        416 	.ds	7
      00000B 02r03rD2         [24]  417 	ljmp	_Keypad_Debounce
      00000E                        418 	.ds	5
      000013 32               [24]  419 	reti
      000014                        420 	.ds	7
      00001B 02r03rF8         [24]  421 	ljmp	_Base_timer
                                    422 ;--------------------------------------------------------
                                    423 ; global & static initialisations
                                    424 ;--------------------------------------------------------
                                    425 	.area HOME    (CODE)
                                    426 	.area GSINIT  (CODE)
                                    427 	.area GSFINAL (CODE)
                                    428 	.area GSINIT  (CODE)
                                    429 	.globl __sdcc_gsinit_startup
                                    430 	.globl __sdcc_program_startup
                                    431 	.globl __start__stack
                                    432 	.globl __mcs51_genXINIT
                                    433 	.globl __mcs51_genXRAMCLEAR
                                    434 	.globl __mcs51_genRAMCLEAR
                                    435 ;	Computer.c:16: char timer_count = 0, number, num1_counter = 0;
      000000 75*00 00         [24]  436 	mov	_timer_count,#0x00
                                    437 ;	Computer.c:16: __sbit cal_flag = 0;
      000003 75*02 00         [24]  438 	mov	_num1_counter,#0x00
                                    439 ;	Computer.c:5: __idata unsigned char buffer[8] = {-1};
      000006 78r00            [12]  440 	mov	r0,#_buffer
      000008 76 FF            [12]  441 	mov	@r0,#0xff
                                    442 ;	Computer.c:6: __idata unsigned char flag = 0;
      00000A 78r08            [12]  443 	mov	r0,#_flag
      00000C 76 00            [12]  444 	mov	@r0,#0x00
                                    445 ;	Computer.c:7: __idata unsigned char history[10] = {-1};
      00000E 78r09            [12]  446 	mov	r0,#_history
      000010 76 FF            [12]  447 	mov	@r0,#0xff
                                    448 ;	Computer.c:8: __idata unsigned char history_start[10] = {-1};
      000012 78r13            [12]  449 	mov	r0,#_history_start
      000014 76 FF            [12]  450 	mov	@r0,#0xff
                                    451 ;	Computer.c:9: __idata unsigned int Base_num[5] = {0};
      000016 78r1D            [12]  452 	mov	r0,#_Base_num
      000018 76 00            [12]  453 	mov	@r0,#0x00
      00001A 08               [12]  454 	inc	r0
      00001B 76 00            [12]  455 	mov	@r0,#0x00
                                    456 ;	Computer.c:10: __idata unsigned char negative_base[5] = {0};
      00001D 78r27            [12]  457 	mov	r0,#_negative_base
      00001F 76 00            [12]  458 	mov	@r0,#0x00
                                    459 ;	Computer.c:11: __idata unsigned char base_index = 0;
      000021 78r2C            [12]  460 	mov	r0,#_base_index
      000023 76 00            [12]  461 	mov	@r0,#0x00
                                    462 ;	Computer.c:12: __idata unsigned char history_count = 0;
      000025 78r2D            [12]  463 	mov	r0,#_history_count
      000027 76 00            [12]  464 	mov	@r0,#0x00
                                    465 ;	Computer.c:13: __idata unsigned char start = 0;
      000029 78r2E            [12]  466 	mov	r0,#_start
      00002B 76 00            [12]  467 	mov	@r0,#0x00
                                    468 ;	Computer.c:14: __idata unsigned char base_flag = 0;
      00002D 78r2F            [12]  469 	mov	r0,#_base_flag
      00002F 76 00            [12]  470 	mov	@r0,#0x00
                                    471 ;	Computer.c:17: __sbit cal_flag = 0;
                                    472 ;	assignBit
      000031 C2*00            [12]  473 	clr	_cal_flag
                                    474 ;	Computer.c:18: __sbit Keypad_flag = 0;
                                    475 ;	assignBit
      000033 C2*01            [12]  476 	clr	_Keypad_flag
                                    477 	.area GSFINAL (CODE)
      000000 02r00r1E         [24]  478 	ljmp	__sdcc_program_startup
                                    479 ;--------------------------------------------------------
                                    480 ; Home
                                    481 ;--------------------------------------------------------
                                    482 	.area HOME    (CODE)
                                    483 	.area HOME    (CODE)
      00001E                        484 __sdcc_program_startup:
      00001E 02r04r23         [24]  485 	ljmp	_main
                                    486 ;	return from main will return to caller
                                    487 ;--------------------------------------------------------
                                    488 ; code
                                    489 ;--------------------------------------------------------
                                    490 	.area CSEG    (CODE)
                                    491 ;------------------------------------------------------------
                                    492 ;Allocation info for local variables in function 'Restart'
                                    493 ;------------------------------------------------------------
                                    494 ;num_2                     Allocated with name '_Restart_PARM_2'
                                    495 ;op                        Allocated with name '_Restart_PARM_3'
                                    496 ;ans                       Allocated with name '_Restart_PARM_4'
                                    497 ;negative_num1             Allocated with name '_Restart_PARM_5'
                                    498 ;negative_num2             Allocated with name '_Restart_PARM_6'
                                    499 ;negative_ans              Allocated with name '_Restart_PARM_7'
                                    500 ;num_1                     Allocated to registers r5 r6 r7 
                                    501 ;------------------------------------------------------------
                                    502 ;	Computer.c:20: void Restart(int *num_1, int *num_2, char *op, int *ans, int *negative_num1, int *negative_num2, int *negative_ans)
                                    503 ;	-----------------------------------------
                                    504 ;	 function Restart
                                    505 ;	-----------------------------------------
      000000                        506 _Restart:
                           000007   507 	ar7 = 0x07
                           000006   508 	ar6 = 0x06
                           000005   509 	ar5 = 0x05
                           000004   510 	ar4 = 0x04
                           000003   511 	ar3 = 0x03
                           000002   512 	ar2 = 0x02
                           000001   513 	ar1 = 0x01
                           000000   514 	ar0 = 0x00
                                    515 ;	Computer.c:22: *num_1 = 0;
      000000 E4               [12]  516 	clr	a
      000001 12r00r00         [24]  517 	lcall	__gptrput
      000004 A3               [24]  518 	inc	dptr
      000005 12r00r00         [24]  519 	lcall	__gptrput
                                    520 ;	Computer.c:23: *num_2 = 0;
      000008 AD*00            [24]  521 	mov	r5,_Restart_PARM_2
      00000A AE*01            [24]  522 	mov	r6,(_Restart_PARM_2 + 1)
      00000C AF*02            [24]  523 	mov	r7,(_Restart_PARM_2 + 2)
      00000E 8D 82            [24]  524 	mov	dpl,r5
      000010 8E 83            [24]  525 	mov	dph,r6
      000012 8F F0            [24]  526 	mov	b,r7
      000014 12r00r00         [24]  527 	lcall	__gptrput
      000017 A3               [24]  528 	inc	dptr
      000018 12r00r00         [24]  529 	lcall	__gptrput
                                    530 ;	Computer.c:24: *op = '$';
      00001B AD*03            [24]  531 	mov	r5,_Restart_PARM_3
      00001D AE*04            [24]  532 	mov	r6,(_Restart_PARM_3 + 1)
      00001F AF*05            [24]  533 	mov	r7,(_Restart_PARM_3 + 2)
      000021 8D 82            [24]  534 	mov	dpl,r5
      000023 8E 83            [24]  535 	mov	dph,r6
      000025 8F F0            [24]  536 	mov	b,r7
      000027 74 24            [12]  537 	mov	a,#0x24
      000029 12r00r00         [24]  538 	lcall	__gptrput
                                    539 ;	Computer.c:25: *ans = 0;
      00002C AD*06            [24]  540 	mov	r5,_Restart_PARM_4
      00002E AE*07            [24]  541 	mov	r6,(_Restart_PARM_4 + 1)
      000030 AF*08            [24]  542 	mov	r7,(_Restart_PARM_4 + 2)
      000032 8D 82            [24]  543 	mov	dpl,r5
      000034 8E 83            [24]  544 	mov	dph,r6
      000036 8F F0            [24]  545 	mov	b,r7
      000038 E4               [12]  546 	clr	a
      000039 12r00r00         [24]  547 	lcall	__gptrput
      00003C A3               [24]  548 	inc	dptr
      00003D 12r00r00         [24]  549 	lcall	__gptrput
                                    550 ;	Computer.c:26: cal_flag = 0;
                                    551 ;	assignBit
      000040 C2*00            [12]  552 	clr	_cal_flag
                                    553 ;	Computer.c:27: *negative_ans = 0;
      000042 AD*0F            [24]  554 	mov	r5,_Restart_PARM_7
      000044 AE*10            [24]  555 	mov	r6,(_Restart_PARM_7 + 1)
      000046 AF*11            [24]  556 	mov	r7,(_Restart_PARM_7 + 2)
      000048 8D 82            [24]  557 	mov	dpl,r5
      00004A 8E 83            [24]  558 	mov	dph,r6
      00004C 8F F0            [24]  559 	mov	b,r7
      00004E E4               [12]  560 	clr	a
      00004F 12r00r00         [24]  561 	lcall	__gptrput
      000052 A3               [24]  562 	inc	dptr
      000053 12r00r00         [24]  563 	lcall	__gptrput
                                    564 ;	Computer.c:28: *negative_num1 = -1;
      000056 AD*09            [24]  565 	mov	r5,_Restart_PARM_5
      000058 AE*0A            [24]  566 	mov	r6,(_Restart_PARM_5 + 1)
      00005A AF*0B            [24]  567 	mov	r7,(_Restart_PARM_5 + 2)
      00005C 8D 82            [24]  568 	mov	dpl,r5
      00005E 8E 83            [24]  569 	mov	dph,r6
      000060 8F F0            [24]  570 	mov	b,r7
      000062 14               [12]  571 	dec	a
      000063 12r00r00         [24]  572 	lcall	__gptrput
      000066 A3               [24]  573 	inc	dptr
      000067 12r00r00         [24]  574 	lcall	__gptrput
                                    575 ;	Computer.c:29: *negative_num2 = -1;
      00006A AD*0C            [24]  576 	mov	r5,_Restart_PARM_6
      00006C AE*0D            [24]  577 	mov	r6,(_Restart_PARM_6 + 1)
      00006E AF*0E            [24]  578 	mov	r7,(_Restart_PARM_6 + 2)
      000070 8D 82            [24]  579 	mov	dpl,r5
      000072 8E 83            [24]  580 	mov	dph,r6
      000074 8F F0            [24]  581 	mov	b,r7
      000076 12r00r00         [24]  582 	lcall	__gptrput
      000079 A3               [24]  583 	inc	dptr
      00007A 12r00r00         [24]  584 	lcall	__gptrput
                                    585 ;	Computer.c:30: num1_counter = 0;
      00007D 75*02 00         [24]  586 	mov	_num1_counter,#0x00
                                    587 ;	Computer.c:31: }
      000080 22               [24]  588 	ret
                                    589 ;------------------------------------------------------------
                                    590 ;Allocation info for local variables in function 'SaveNumber'
                                    591 ;------------------------------------------------------------
                                    592 ;start                     Allocated with name '_SaveNumber_PARM_2'
                                    593 ;b                         Allocated with name '_SaveNumber_PARM_3'
                                    594 ;n                         Allocated to registers r7 
                                    595 ;i                         Allocated to registers 
                                    596 ;------------------------------------------------------------
                                    597 ;	Computer.c:32: void SaveNumber(char n, char start, char *b)
                                    598 ;	-----------------------------------------
                                    599 ;	 function SaveNumber
                                    600 ;	-----------------------------------------
      000081                        601 _SaveNumber:
      000081 AF 82            [24]  602 	mov	r7, dpl
                                    603 ;	Computer.c:34: for (char i = start; i > 0; i--)
      000083 AE*00            [24]  604 	mov	r6,_SaveNumber_PARM_2
      000085                        605 00103$:
      000085 EE               [12]  606 	mov	a,r6
      000086 60 32            [24]  607 	jz	00101$
                                    608 ;	Computer.c:36: b[i] = b[i - 1];
      000088 EE               [12]  609 	mov	a,r6
      000089 25*01            [12]  610 	add	a, _SaveNumber_PARM_3
      00008B FB               [12]  611 	mov	r3,a
      00008C E4               [12]  612 	clr	a
      00008D 35*02            [12]  613 	addc	a, (_SaveNumber_PARM_3 + 1)
      00008F FC               [12]  614 	mov	r4,a
      000090 AD*03            [24]  615 	mov	r5,(_SaveNumber_PARM_3 + 2)
      000092 8E 01            [24]  616 	mov	ar1,r6
      000094 7A 00            [12]  617 	mov	r2,#0x00
      000096 19               [12]  618 	dec	r1
      000097 B9 FF 01         [24]  619 	cjne	r1,#0xff,00123$
      00009A 1A               [12]  620 	dec	r2
      00009B                        621 00123$:
      00009B E9               [12]  622 	mov	a,r1
      00009C 25*01            [12]  623 	add	a, _SaveNumber_PARM_3
      00009E F9               [12]  624 	mov	r1,a
      00009F EA               [12]  625 	mov	a,r2
      0000A0 35*02            [12]  626 	addc	a, (_SaveNumber_PARM_3 + 1)
      0000A2 F8               [12]  627 	mov	r0,a
      0000A3 AA*03            [24]  628 	mov	r2,(_SaveNumber_PARM_3 + 2)
      0000A5 89 82            [24]  629 	mov	dpl,r1
      0000A7 88 83            [24]  630 	mov	dph,r0
      0000A9 8A F0            [24]  631 	mov	b,r2
      0000AB 12r00r00         [24]  632 	lcall	__gptrget
      0000AE 8B 82            [24]  633 	mov	dpl,r3
      0000B0 8C 83            [24]  634 	mov	dph,r4
      0000B2 8D F0            [24]  635 	mov	b,r5
      0000B4 12r00r00         [24]  636 	lcall	__gptrput
                                    637 ;	Computer.c:34: for (char i = start; i > 0; i--)
      0000B7 1E               [12]  638 	dec	r6
      0000B8 80 CB            [24]  639 	sjmp	00103$
      0000BA                        640 00101$:
                                    641 ;	Computer.c:38: b[0] = n;
      0000BA AC*01            [24]  642 	mov	r4,_SaveNumber_PARM_3
      0000BC AD*02            [24]  643 	mov	r5,(_SaveNumber_PARM_3 + 1)
      0000BE AE*03            [24]  644 	mov	r6,(_SaveNumber_PARM_3 + 2)
      0000C0 8C 82            [24]  645 	mov	dpl,r4
      0000C2 8D 83            [24]  646 	mov	dph,r5
      0000C4 8E F0            [24]  647 	mov	b,r6
      0000C6 EF               [12]  648 	mov	a,r7
                                    649 ;	Computer.c:39: }
      0000C7 02r00r00         [24]  650 	ljmp	__gptrput
                                    651 ;------------------------------------------------------------
                                    652 ;Allocation info for local variables in function 'Update_Expression'
                                    653 ;------------------------------------------------------------
                                    654 ;num_2                     Allocated with name '_Update_Expression_PARM_2'
                                    655 ;op                        Allocated with name '_Update_Expression_PARM_3'
                                    656 ;negative_num1             Allocated with name '_Update_Expression_PARM_4'
                                    657 ;negative_num2             Allocated with name '_Update_Expression_PARM_5'
                                    658 ;num_1                     Allocated with name '_Update_Expression_num_1_10000_13'
                                    659 ;sloc0                     Allocated with name '_Update_Expression_sloc0_1_0'
                                    660 ;------------------------------------------------------------
                                    661 ;	Computer.c:42: void Update_Expression(int *num_1, int *num_2, char *op, int *negative_num1, int *negative_num2)
                                    662 ;	-----------------------------------------
                                    663 ;	 function Update_Expression
                                    664 ;	-----------------------------------------
      0000CA                        665 _Update_Expression:
      0000CA 85 82*0F         [24]  666 	mov	_Update_Expression_num_1_10000_13,dpl
      0000CD 85 83*10         [24]  667 	mov	(_Update_Expression_num_1_10000_13 + 1),dph
      0000D0 85 F0*11         [24]  668 	mov	(_Update_Expression_num_1_10000_13 + 2),b
                                    669 ;	Computer.c:45: if (buffer[0] >= 0 && buffer[0] <= 9)
      0000D3 78r00            [12]  670 	mov	r0,#_buffer
      0000D5 E6               [12]  671 	mov	a,@r0
      0000D6 FC               [12]  672 	mov	r4,a
      0000D7 24 F6            [12]  673 	add	a,#0xff - 0x09
      0000D9 50 03            [24]  674 	jnc	00199$
      0000DB 02r01r94         [24]  675 	ljmp	00122$
      0000DE                        676 00199$:
                                    677 ;	Computer.c:47: if (*op == '$')
      0000DE 85*06*12         [24]  678 	mov	_Update_Expression_sloc0_1_0,_Update_Expression_PARM_3
      0000E1 85*07*13         [24]  679 	mov	(_Update_Expression_sloc0_1_0 + 1),(_Update_Expression_PARM_3 + 1)
      0000E4 85*08*14         [24]  680 	mov	(_Update_Expression_sloc0_1_0 + 2),(_Update_Expression_PARM_3 + 2)
      0000E7 85*12 82         [24]  681 	mov	dpl,_Update_Expression_sloc0_1_0
      0000EA 85*13 83         [24]  682 	mov	dph,(_Update_Expression_sloc0_1_0 + 1)
      0000ED 85*14 F0         [24]  683 	mov	b,(_Update_Expression_sloc0_1_0 + 2)
      0000F0 12r00r00         [24]  684 	lcall	__gptrget
      0000F3 FB               [12]  685 	mov	r3,a
      0000F4 BB 24 40         [24]  686 	cjne	r3,#0x24,00102$
                                    687 ;	Computer.c:49: *num_1 = *num_1 * 10 + (int)buffer[0];
      0000F7 85*0F 82         [24]  688 	mov	dpl,_Update_Expression_num_1_10000_13
      0000FA 85*10 83         [24]  689 	mov	dph,(_Update_Expression_num_1_10000_13 + 1)
      0000FD 85*11 F0         [24]  690 	mov	b,(_Update_Expression_num_1_10000_13 + 2)
      000100 12r00r00         [24]  691 	lcall	__gptrget
      000103 F5*00            [12]  692 	mov	__mulint_PARM_2,a
      000105 A3               [24]  693 	inc	dptr
      000106 12r00r00         [24]  694 	lcall	__gptrget
      000109 F5*01            [12]  695 	mov	(__mulint_PARM_2 + 1),a
      00010B 90 00 0A         [24]  696 	mov	dptr,#0x000a
      00010E C0 04            [24]  697 	push	ar4
      000110 12r00r00         [24]  698 	lcall	__mulint
      000113 AA 82            [24]  699 	mov	r2, dpl
      000115 AB 83            [24]  700 	mov	r3, dph
      000117 D0 04            [24]  701 	pop	ar4
      000119 8C 06            [24]  702 	mov	ar6,r4
      00011B 7F 00            [12]  703 	mov	r7,#0x00
      00011D EE               [12]  704 	mov	a,r6
      00011E 2A               [12]  705 	add	a, r2
      00011F FA               [12]  706 	mov	r2,a
      000120 EF               [12]  707 	mov	a,r7
      000121 3B               [12]  708 	addc	a, r3
      000122 FB               [12]  709 	mov	r3,a
      000123 85*0F 82         [24]  710 	mov	dpl,_Update_Expression_num_1_10000_13
      000126 85*10 83         [24]  711 	mov	dph,(_Update_Expression_num_1_10000_13 + 1)
      000129 85*11 F0         [24]  712 	mov	b,(_Update_Expression_num_1_10000_13 + 2)
      00012C EA               [12]  713 	mov	a,r2
      00012D 12r00r00         [24]  714 	lcall	__gptrput
      000130 A3               [24]  715 	inc	dptr
      000131 EB               [12]  716 	mov	a,r3
      000132 12r00r00         [24]  717 	lcall	__gptrput
                                    718 ;	Computer.c:50: num1_counter++;
      000135 05*02            [12]  719 	inc	_num1_counter
      000137                        720 00102$:
                                    721 ;	Computer.c:52: if (*op != '$')
      000137 85*12 82         [24]  722 	mov	dpl,_Update_Expression_sloc0_1_0
      00013A 85*13 83         [24]  723 	mov	dph,(_Update_Expression_sloc0_1_0 + 1)
      00013D 85*14 F0         [24]  724 	mov	b,(_Update_Expression_sloc0_1_0 + 2)
      000140 12r00r00         [24]  725 	lcall	__gptrget
      000143 FF               [12]  726 	mov	r7,a
      000144 BF 24 01         [24]  727 	cjne	r7,#0x24,00202$
      000147 22               [24]  728 	ret
      000148                        729 00202$:
                                    730 ;	Computer.c:54: *num_2 = *num_2 * 10 + (int)buffer[0];
      000148 AD*03            [24]  731 	mov	r5,_Update_Expression_PARM_2
      00014A AE*04            [24]  732 	mov	r6,(_Update_Expression_PARM_2 + 1)
      00014C AF*05            [24]  733 	mov	r7,(_Update_Expression_PARM_2 + 2)
      00014E 8D 82            [24]  734 	mov	dpl,r5
      000150 8E 83            [24]  735 	mov	dph,r6
      000152 8F F0            [24]  736 	mov	b,r7
      000154 12r00r00         [24]  737 	lcall	__gptrget
      000157 F5*00            [12]  738 	mov	__mulint_PARM_2,a
      000159 A3               [24]  739 	inc	dptr
      00015A 12r00r00         [24]  740 	lcall	__gptrget
      00015D F5*01            [12]  741 	mov	(__mulint_PARM_2 + 1),a
      00015F 90 00 0A         [24]  742 	mov	dptr,#0x000a
      000162 C0 07            [24]  743 	push	ar7
      000164 C0 06            [24]  744 	push	ar6
      000166 C0 05            [24]  745 	push	ar5
      000168 12r00r00         [24]  746 	lcall	__mulint
      00016B 85 82*12         [24]  747 	mov	_Update_Expression_sloc0_1_0,dpl
      00016E 85 83*13         [24]  748 	mov	(_Update_Expression_sloc0_1_0 + 1),dph
      000171 D0 05            [24]  749 	pop	ar5
      000173 D0 06            [24]  750 	pop	ar6
      000175 D0 07            [24]  751 	pop	ar7
      000177 78r00            [12]  752 	mov	r0,#_buffer
      000179 86 03            [24]  753 	mov	ar3,@r0
      00017B 7A 00            [12]  754 	mov	r2,#0x00
      00017D EB               [12]  755 	mov	a,r3
      00017E 25*12            [12]  756 	add	a, _Update_Expression_sloc0_1_0
      000180 FB               [12]  757 	mov	r3,a
      000181 EA               [12]  758 	mov	a,r2
      000182 35*13            [12]  759 	addc	a, (_Update_Expression_sloc0_1_0 + 1)
      000184 FA               [12]  760 	mov	r2,a
      000185 8D 82            [24]  761 	mov	dpl,r5
      000187 8E 83            [24]  762 	mov	dph,r6
      000189 8F F0            [24]  763 	mov	b,r7
      00018B EB               [12]  764 	mov	a,r3
      00018C 12r00r00         [24]  765 	lcall	__gptrput
      00018F A3               [24]  766 	inc	dptr
      000190 EA               [12]  767 	mov	a,r2
      000191 02r00r00         [24]  768 	ljmp	__gptrput
      000194                        769 00122$:
                                    770 ;	Computer.c:57: else if (buffer[0] == 13 && num1_counter == 0)
      000194 E4               [12]  771 	clr	a
      000195 BC 0D 01         [24]  772 	cjne	r4,#0x0d,00203$
      000198 04               [12]  773 	inc	a
      000199                        774 00203$:
      000199 FF               [12]  775 	mov	r7,a
      00019A 60 1A            [24]  776 	jz	00118$
      00019C E5*02            [12]  777 	mov	a,_num1_counter
      00019E 70 16            [24]  778 	jnz	00118$
                                    779 ;	Computer.c:59: *negative_num1 = 1;
      0001A0 AB*09            [24]  780 	mov	r3,_Update_Expression_PARM_4
      0001A2 AD*0A            [24]  781 	mov	r5,(_Update_Expression_PARM_4 + 1)
      0001A4 AE*0B            [24]  782 	mov	r6,(_Update_Expression_PARM_4 + 2)
      0001A6 8B 82            [24]  783 	mov	dpl,r3
      0001A8 8D 83            [24]  784 	mov	dph,r5
      0001AA 8E F0            [24]  785 	mov	b,r6
      0001AC 74 01            [12]  786 	mov	a,#0x01
      0001AE 12r00r00         [24]  787 	lcall	__gptrput
      0001B1 A3               [24]  788 	inc	dptr
      0001B2 E4               [12]  789 	clr	a
      0001B3 02r00r00         [24]  790 	ljmp	__gptrput
      0001B6                        791 00118$:
                                    792 ;	Computer.c:61: else if (buffer[0] >= 12 && buffer[0] <= 15 && num1_counter != 0 && *op == '$')
      0001B6 BC 0C 00         [24]  793 	cjne	r4,#0x0c,00207$
      0001B9                        794 00207$:
      0001B9 40 26            [24]  795 	jc	00112$
      0001BB EC               [12]  796 	mov	a,r4
      0001BC 24 F0            [12]  797 	add	a,#0xff - 0x0f
      0001BE 40 21            [24]  798 	jc	00112$
      0001C0 E5*02            [12]  799 	mov	a,_num1_counter
      0001C2 60 1D            [24]  800 	jz	00112$
      0001C4 AB*06            [24]  801 	mov	r3,_Update_Expression_PARM_3
      0001C6 AD*07            [24]  802 	mov	r5,(_Update_Expression_PARM_3 + 1)
      0001C8 AE*08            [24]  803 	mov	r6,(_Update_Expression_PARM_3 + 2)
      0001CA 8B 82            [24]  804 	mov	dpl,r3
      0001CC 8D 83            [24]  805 	mov	dph,r5
      0001CE 8E F0            [24]  806 	mov	b,r6
      0001D0 12r00r00         [24]  807 	lcall	__gptrget
      0001D3 FA               [12]  808 	mov	r2,a
      0001D4 BA 24 0A         [24]  809 	cjne	r2,#0x24,00112$
                                    810 ;	Computer.c:63: *op = buffer[0];
      0001D7 8B 82            [24]  811 	mov	dpl,r3
      0001D9 8D 83            [24]  812 	mov	dph,r5
      0001DB 8E F0            [24]  813 	mov	b,r6
      0001DD EC               [12]  814 	mov	a,r4
      0001DE 02r00r00         [24]  815 	ljmp	__gptrput
      0001E1                        816 00112$:
                                    817 ;	Computer.c:65: else if (buffer[0] == 13 && *op != '$')
      0001E1 EF               [12]  818 	mov	a,r7
      0001E2 60 2B            [24]  819 	jz	00108$
      0001E4 AD*06            [24]  820 	mov	r5,_Update_Expression_PARM_3
      0001E6 AE*07            [24]  821 	mov	r6,(_Update_Expression_PARM_3 + 1)
      0001E8 AF*08            [24]  822 	mov	r7,(_Update_Expression_PARM_3 + 2)
      0001EA 8D 82            [24]  823 	mov	dpl,r5
      0001EC 8E 83            [24]  824 	mov	dph,r6
      0001EE 8F F0            [24]  825 	mov	b,r7
      0001F0 12r00r00         [24]  826 	lcall	__gptrget
      0001F3 FD               [12]  827 	mov	r5,a
      0001F4 BD 24 02         [24]  828 	cjne	r5,#0x24,00214$
      0001F7 80 16            [24]  829 	sjmp	00108$
      0001F9                        830 00214$:
                                    831 ;	Computer.c:67: *negative_num2 = 1;
      0001F9 AD*0C            [24]  832 	mov	r5,_Update_Expression_PARM_5
      0001FB AE*0D            [24]  833 	mov	r6,(_Update_Expression_PARM_5 + 1)
      0001FD AF*0E            [24]  834 	mov	r7,(_Update_Expression_PARM_5 + 2)
      0001FF 8D 82            [24]  835 	mov	dpl,r5
      000201 8E 83            [24]  836 	mov	dph,r6
      000203 8F F0            [24]  837 	mov	b,r7
      000205 74 01            [12]  838 	mov	a,#0x01
      000207 12r00r00         [24]  839 	lcall	__gptrput
      00020A A3               [24]  840 	inc	dptr
      00020B E4               [12]  841 	clr	a
      00020C 02r00r00         [24]  842 	ljmp	__gptrput
      00020F                        843 00108$:
                                    844 ;	Computer.c:69: else if (buffer[0] == 11)
      00020F BC 0B 02         [24]  845 	cjne	r4,#0x0b,00125$
                                    846 ;	Computer.c:71: cal_flag = 1;
                                    847 ;	assignBit
      000212 D2*00            [12]  848 	setb	_cal_flag
      000214                        849 00125$:
                                    850 ;	Computer.c:73: }
      000214 22               [24]  851 	ret
                                    852 ;------------------------------------------------------------
                                    853 ;Allocation info for local variables in function 'Calculate'
                                    854 ;------------------------------------------------------------
                                    855 ;num2                      Allocated with name '_Calculate_PARM_2'
                                    856 ;op                        Allocated with name '_Calculate_PARM_3'
                                    857 ;negative_num1             Allocated with name '_Calculate_PARM_4'
                                    858 ;negative_num2             Allocated with name '_Calculate_PARM_5'
                                    859 ;ans                       Allocated with name '_Calculate_PARM_6'
                                    860 ;num1                      Allocated to registers r6 r7 
                                    861 ;sloc0                     Allocated with name '_Calculate_sloc0_1_0'
                                    862 ;------------------------------------------------------------
                                    863 ;	Computer.c:76: void Calculate(int num1, int num2, char op, int negative_num1, int negative_num2, int *ans)
                                    864 ;	-----------------------------------------
                                    865 ;	 function Calculate
                                    866 ;	-----------------------------------------
      000215                        867 _Calculate:
      000215 AE 82            [24]  868 	mov	r6, dpl
      000217 AF 83            [24]  869 	mov	r7, dph
                                    870 ;	Computer.c:78: switch (op)
      000219 74 0C            [12]  871 	mov	a,#0x0c
      00021B B5*17 02         [24]  872 	cjne	a,_Calculate_PARM_3,00132$
      00021E 80 18            [24]  873 	sjmp	00101$
      000220                        874 00132$:
      000220 74 0D            [12]  875 	mov	a,#0x0d
      000222 B5*17 02         [24]  876 	cjne	a,_Calculate_PARM_3,00133$
      000225 80 6A            [24]  877 	sjmp	00102$
      000227                        878 00133$:
      000227 74 0E            [12]  879 	mov	a,#0x0e
      000229 B5*17 03         [24]  880 	cjne	a,_Calculate_PARM_3,00134$
      00022C 02r02rEB         [24]  881 	ljmp	00103$
      00022F                        882 00134$:
      00022F 74 0F            [12]  883 	mov	a,#0x0f
      000231 B5*17 03         [24]  884 	cjne	a,_Calculate_PARM_3,00135$
      000234 02r03r4F         [24]  885 	ljmp	00104$
      000237                        886 00135$:
      000237 22               [24]  887 	ret
                                    888 ;	Computer.c:80: case 12:
      000238                        889 00101$:
                                    890 ;	Computer.c:81: *ans = (((-1) * negative_num1) * num1) + (((-1) * negative_num2) * num2);
      000238 AB*1C            [24]  891 	mov	r3,_Calculate_PARM_6
      00023A AC*1D            [24]  892 	mov	r4,(_Calculate_PARM_6 + 1)
      00023C AD*1E            [24]  893 	mov	r5,(_Calculate_PARM_6 + 2)
      00023E C3               [12]  894 	clr	c
      00023F E4               [12]  895 	clr	a
      000240 95*18            [12]  896 	subb	a,_Calculate_PARM_4
      000242 F5 82            [12]  897 	mov	dpl,a
      000244 E4               [12]  898 	clr	a
      000245 95*19            [12]  899 	subb	a,(_Calculate_PARM_4 + 1)
      000247 F5 83            [12]  900 	mov	dph,a
      000249 8E*00            [24]  901 	mov	__mulint_PARM_2,r6
      00024B 8F*01            [24]  902 	mov	(__mulint_PARM_2 + 1),r7
      00024D C0 05            [24]  903 	push	ar5
      00024F C0 04            [24]  904 	push	ar4
      000251 C0 03            [24]  905 	push	ar3
      000253 12r00r00         [24]  906 	lcall	__mulint
      000256 85 82*1F         [24]  907 	mov	_Calculate_sloc0_1_0,dpl
      000259 85 83*20         [24]  908 	mov	(_Calculate_sloc0_1_0 + 1),dph
      00025C C3               [12]  909 	clr	c
      00025D E4               [12]  910 	clr	a
      00025E 95*1A            [12]  911 	subb	a,_Calculate_PARM_5
      000260 F5 82            [12]  912 	mov	dpl,a
      000262 E4               [12]  913 	clr	a
      000263 95*1B            [12]  914 	subb	a,(_Calculate_PARM_5 + 1)
      000265 F5 83            [12]  915 	mov	dph,a
      000267 85*15*00         [24]  916 	mov	__mulint_PARM_2,_Calculate_PARM_2
      00026A 85*16*01         [24]  917 	mov	(__mulint_PARM_2 + 1),(_Calculate_PARM_2 + 1)
      00026D 12r00r00         [24]  918 	lcall	__mulint
      000270 A8 82            [24]  919 	mov	r0, dpl
      000272 AA 83            [24]  920 	mov	r2, dph
      000274 D0 03            [24]  921 	pop	ar3
      000276 D0 04            [24]  922 	pop	ar4
      000278 D0 05            [24]  923 	pop	ar5
      00027A E8               [12]  924 	mov	a,r0
      00027B 25*1F            [12]  925 	add	a, _Calculate_sloc0_1_0
      00027D F8               [12]  926 	mov	r0,a
      00027E EA               [12]  927 	mov	a,r2
      00027F 35*20            [12]  928 	addc	a, (_Calculate_sloc0_1_0 + 1)
      000281 FA               [12]  929 	mov	r2,a
      000282 8B 82            [24]  930 	mov	dpl,r3
      000284 8C 83            [24]  931 	mov	dph,r4
      000286 8D F0            [24]  932 	mov	b,r5
      000288 E8               [12]  933 	mov	a,r0
      000289 12r00r00         [24]  934 	lcall	__gptrput
      00028C A3               [24]  935 	inc	dptr
      00028D EA               [12]  936 	mov	a,r2
                                    937 ;	Computer.c:82: break;
      00028E 02r00r00         [24]  938 	ljmp	__gptrput
                                    939 ;	Computer.c:83: case 13:
      000291                        940 00102$:
                                    941 ;	Computer.c:84: *ans = (((-1) * negative_num1) * num1) - (((-1) * negative_num2) * num2);
      000291 AB*1C            [24]  942 	mov	r3,_Calculate_PARM_6
      000293 AC*1D            [24]  943 	mov	r4,(_Calculate_PARM_6 + 1)
      000295 AD*1E            [24]  944 	mov	r5,(_Calculate_PARM_6 + 2)
      000297 C3               [12]  945 	clr	c
      000298 E4               [12]  946 	clr	a
      000299 95*18            [12]  947 	subb	a,_Calculate_PARM_4
      00029B F5 82            [12]  948 	mov	dpl,a
      00029D E4               [12]  949 	clr	a
      00029E 95*19            [12]  950 	subb	a,(_Calculate_PARM_4 + 1)
      0002A0 F5 83            [12]  951 	mov	dph,a
      0002A2 8E*00            [24]  952 	mov	__mulint_PARM_2,r6
      0002A4 8F*01            [24]  953 	mov	(__mulint_PARM_2 + 1),r7
      0002A6 C0 05            [24]  954 	push	ar5
      0002A8 C0 04            [24]  955 	push	ar4
      0002AA C0 03            [24]  956 	push	ar3
      0002AC 12r00r00         [24]  957 	lcall	__mulint
      0002AF 85 82*1F         [24]  958 	mov	_Calculate_sloc0_1_0,dpl
      0002B2 85 83*20         [24]  959 	mov	(_Calculate_sloc0_1_0 + 1),dph
      0002B5 C3               [12]  960 	clr	c
      0002B6 E4               [12]  961 	clr	a
      0002B7 95*1A            [12]  962 	subb	a,_Calculate_PARM_5
      0002B9 F5 82            [12]  963 	mov	dpl,a
      0002BB E4               [12]  964 	clr	a
      0002BC 95*1B            [12]  965 	subb	a,(_Calculate_PARM_5 + 1)
      0002BE F5 83            [12]  966 	mov	dph,a
      0002C0 85*15*00         [24]  967 	mov	__mulint_PARM_2,_Calculate_PARM_2
      0002C3 85*16*01         [24]  968 	mov	(__mulint_PARM_2 + 1),(_Calculate_PARM_2 + 1)
      0002C6 12r00r00         [24]  969 	lcall	__mulint
      0002C9 A8 82            [24]  970 	mov	r0, dpl
      0002CB AA 83            [24]  971 	mov	r2, dph
      0002CD D0 03            [24]  972 	pop	ar3
      0002CF D0 04            [24]  973 	pop	ar4
      0002D1 D0 05            [24]  974 	pop	ar5
      0002D3 E5*1F            [12]  975 	mov	a,_Calculate_sloc0_1_0
      0002D5 C3               [12]  976 	clr	c
      0002D6 98               [12]  977 	subb	a,r0
      0002D7 F8               [12]  978 	mov	r0,a
      0002D8 E5*20            [12]  979 	mov	a,(_Calculate_sloc0_1_0 + 1)
      0002DA 9A               [12]  980 	subb	a,r2
      0002DB FA               [12]  981 	mov	r2,a
      0002DC 8B 82            [24]  982 	mov	dpl,r3
      0002DE 8C 83            [24]  983 	mov	dph,r4
      0002E0 8D F0            [24]  984 	mov	b,r5
      0002E2 E8               [12]  985 	mov	a,r0
      0002E3 12r00r00         [24]  986 	lcall	__gptrput
      0002E6 A3               [24]  987 	inc	dptr
      0002E7 EA               [12]  988 	mov	a,r2
                                    989 ;	Computer.c:85: break;
      0002E8 02r00r00         [24]  990 	ljmp	__gptrput
                                    991 ;	Computer.c:86: case 14:
      0002EB                        992 00103$:
                                    993 ;	Computer.c:87: *ans = (((-1) * negative_num1) * num1) * (((-1) * negative_num2) * num2);
      0002EB AB*1C            [24]  994 	mov	r3,_Calculate_PARM_6
      0002ED AC*1D            [24]  995 	mov	r4,(_Calculate_PARM_6 + 1)
      0002EF AD*1E            [24]  996 	mov	r5,(_Calculate_PARM_6 + 2)
      0002F1 C3               [12]  997 	clr	c
      0002F2 E4               [12]  998 	clr	a
      0002F3 95*18            [12]  999 	subb	a,_Calculate_PARM_4
      0002F5 F5 82            [12] 1000 	mov	dpl,a
      0002F7 E4               [12] 1001 	clr	a
      0002F8 95*19            [12] 1002 	subb	a,(_Calculate_PARM_4 + 1)
      0002FA F5 83            [12] 1003 	mov	dph,a
      0002FC 8E*00            [24] 1004 	mov	__mulint_PARM_2,r6
      0002FE 8F*01            [24] 1005 	mov	(__mulint_PARM_2 + 1),r7
      000300 C0 05            [24] 1006 	push	ar5
      000302 C0 04            [24] 1007 	push	ar4
      000304 C0 03            [24] 1008 	push	ar3
      000306 12r00r00         [24] 1009 	lcall	__mulint
      000309 A9 82            [24] 1010 	mov	r1, dpl
      00030B AA 83            [24] 1011 	mov	r2, dph
      00030D C3               [12] 1012 	clr	c
      00030E E4               [12] 1013 	clr	a
      00030F 95*1A            [12] 1014 	subb	a,_Calculate_PARM_5
      000311 F5 82            [12] 1015 	mov	dpl,a
      000313 E4               [12] 1016 	clr	a
      000314 95*1B            [12] 1017 	subb	a,(_Calculate_PARM_5 + 1)
      000316 F5 83            [12] 1018 	mov	dph,a
      000318 85*15*00         [24] 1019 	mov	__mulint_PARM_2,_Calculate_PARM_2
      00031B 85*16*01         [24] 1020 	mov	(__mulint_PARM_2 + 1),(_Calculate_PARM_2 + 1)
      00031E C0 02            [24] 1021 	push	ar2
      000320 C0 01            [24] 1022 	push	ar1
      000322 12r00r00         [24] 1023 	lcall	__mulint
      000325 85 82*00         [24] 1024 	mov	__mulint_PARM_2,dpl
      000328 85 83*01         [24] 1025 	mov	(__mulint_PARM_2 + 1),dph
      00032B D0 01            [24] 1026 	pop	ar1
      00032D D0 02            [24] 1027 	pop	ar2
      00032F 89 82            [24] 1028 	mov	dpl, r1
      000331 8A 83            [24] 1029 	mov	dph, r2
      000333 12r00r00         [24] 1030 	lcall	__mulint
      000336 A9 82            [24] 1031 	mov	r1, dpl
      000338 AA 83            [24] 1032 	mov	r2, dph
      00033A D0 03            [24] 1033 	pop	ar3
      00033C D0 04            [24] 1034 	pop	ar4
      00033E D0 05            [24] 1035 	pop	ar5
      000340 8B 82            [24] 1036 	mov	dpl,r3
      000342 8C 83            [24] 1037 	mov	dph,r4
      000344 8D F0            [24] 1038 	mov	b,r5
      000346 E9               [12] 1039 	mov	a,r1
      000347 12r00r00         [24] 1040 	lcall	__gptrput
      00034A A3               [24] 1041 	inc	dptr
      00034B EA               [12] 1042 	mov	a,r2
                                   1043 ;	Computer.c:88: break;
      00034C 02r00r00         [24] 1044 	ljmp	__gptrput
                                   1045 ;	Computer.c:89: case 15:
      00034F                       1046 00104$:
                                   1047 ;	Computer.c:90: *ans = (((-1) * negative_num1) * num1) / (((-1) * negative_num2) * num2);
      00034F AB*1C            [24] 1048 	mov	r3,_Calculate_PARM_6
      000351 AC*1D            [24] 1049 	mov	r4,(_Calculate_PARM_6 + 1)
      000353 AD*1E            [24] 1050 	mov	r5,(_Calculate_PARM_6 + 2)
      000355 C3               [12] 1051 	clr	c
      000356 E4               [12] 1052 	clr	a
      000357 95*18            [12] 1053 	subb	a,_Calculate_PARM_4
      000359 F5 82            [12] 1054 	mov	dpl,a
      00035B E4               [12] 1055 	clr	a
      00035C 95*19            [12] 1056 	subb	a,(_Calculate_PARM_4 + 1)
      00035E F5 83            [12] 1057 	mov	dph,a
      000360 8E*00            [24] 1058 	mov	__mulint_PARM_2,r6
      000362 8F*01            [24] 1059 	mov	(__mulint_PARM_2 + 1),r7
      000364 C0 05            [24] 1060 	push	ar5
      000366 C0 04            [24] 1061 	push	ar4
      000368 C0 03            [24] 1062 	push	ar3
      00036A 12r00r00         [24] 1063 	lcall	__mulint
      00036D AE 82            [24] 1064 	mov	r6, dpl
      00036F AF 83            [24] 1065 	mov	r7, dph
      000371 D0 03            [24] 1066 	pop	ar3
      000373 D0 04            [24] 1067 	pop	ar4
      000375 D0 05            [24] 1068 	pop	ar5
      000377 C3               [12] 1069 	clr	c
      000378 E4               [12] 1070 	clr	a
      000379 95*1A            [12] 1071 	subb	a,_Calculate_PARM_5
      00037B F5 82            [12] 1072 	mov	dpl,a
      00037D E4               [12] 1073 	clr	a
      00037E 95*1B            [12] 1074 	subb	a,(_Calculate_PARM_5 + 1)
      000380 F5 83            [12] 1075 	mov	dph,a
      000382 85*15*00         [24] 1076 	mov	__mulint_PARM_2,_Calculate_PARM_2
      000385 85*16*01         [24] 1077 	mov	(__mulint_PARM_2 + 1),(_Calculate_PARM_2 + 1)
      000388 C0 07            [24] 1078 	push	ar7
      00038A C0 06            [24] 1079 	push	ar6
      00038C C0 05            [24] 1080 	push	ar5
      00038E C0 04            [24] 1081 	push	ar4
      000390 C0 03            [24] 1082 	push	ar3
      000392 12r00r00         [24] 1083 	lcall	__mulint
      000395 85 82*00         [24] 1084 	mov	__divsint_PARM_2,dpl
      000398 85 83*01         [24] 1085 	mov	(__divsint_PARM_2 + 1),dph
      00039B D0 03            [24] 1086 	pop	ar3
      00039D D0 04            [24] 1087 	pop	ar4
      00039F D0 05            [24] 1088 	pop	ar5
      0003A1 D0 06            [24] 1089 	pop	ar6
      0003A3 D0 07            [24] 1090 	pop	ar7
      0003A5 8E 82            [24] 1091 	mov	dpl, r6
      0003A7 8F 83            [24] 1092 	mov	dph, r7
      0003A9 C0 05            [24] 1093 	push	ar5
      0003AB C0 04            [24] 1094 	push	ar4
      0003AD C0 03            [24] 1095 	push	ar3
      0003AF 12r00r00         [24] 1096 	lcall	__divsint
      0003B2 AE 82            [24] 1097 	mov	r6, dpl
      0003B4 AF 83            [24] 1098 	mov	r7, dph
      0003B6 D0 03            [24] 1099 	pop	ar3
      0003B8 D0 04            [24] 1100 	pop	ar4
      0003BA D0 05            [24] 1101 	pop	ar5
      0003BC 8B 82            [24] 1102 	mov	dpl,r3
      0003BE 8C 83            [24] 1103 	mov	dph,r4
      0003C0 8D F0            [24] 1104 	mov	b,r5
      0003C2 EE               [12] 1105 	mov	a,r6
      0003C3 12r00r00         [24] 1106 	lcall	__gptrput
      0003C6 A3               [24] 1107 	inc	dptr
      0003C7 EF               [12] 1108 	mov	a,r7
                                   1109 ;	Computer.c:92: }
                                   1110 ;	Computer.c:93: }
      0003C8 02r00r00         [24] 1111 	ljmp	__gptrput
                                   1112 ;------------------------------------------------------------
                                   1113 ;Allocation info for local variables in function 'Keypad_Debounce_init'
                                   1114 ;------------------------------------------------------------
                                   1115 ;	Computer.c:96: void Keypad_Debounce_init(void)
                                   1116 ;	-----------------------------------------
                                   1117 ;	 function Keypad_Debounce_init
                                   1118 ;	-----------------------------------------
      0003CB                       1119 _Keypad_Debounce_init:
                                   1120 ;	Computer.c:98: IE = 0x8a;
      0003CB 75 A8 8A         [24] 1121 	mov	_IE,#0x8a
                                   1122 ;	Computer.c:100: TMOD = 0x01;
      0003CE 75 89 01         [24] 1123 	mov	_TMOD,#0x01
                                   1124 ;	Computer.c:102: }
      0003D1 22               [24] 1125 	ret
                                   1126 ;------------------------------------------------------------
                                   1127 ;Allocation info for local variables in function 'Keypad_Debounce'
                                   1128 ;------------------------------------------------------------
                                   1129 ;	Computer.c:104: void Keypad_Debounce(void) __interrupt(1) __using(1)
                                   1130 ;	-----------------------------------------
                                   1131 ;	 function Keypad_Debounce
                                   1132 ;	-----------------------------------------
      0003D2                       1133 _Keypad_Debounce:
                           00000F  1134 	ar7 = 0x0f
                           00000E  1135 	ar6 = 0x0e
                           00000D  1136 	ar5 = 0x0d
                           00000C  1137 	ar4 = 0x0c
                           00000B  1138 	ar3 = 0x0b
                           00000A  1139 	ar2 = 0x0a
                           000009  1140 	ar1 = 0x09
                           000008  1141 	ar0 = 0x08
      0003D2 C0 E0            [24] 1142 	push	acc
      0003D4 C0 D0            [24] 1143 	push	psw
                                   1144 ;	Computer.c:106: TH0 = (65536 - 50000) / 256;
      0003D6 75 8C 3C         [24] 1145 	mov	_TH0,#0x3c
                                   1146 ;	Computer.c:107: TL0 = (65536 - 50000) % 256;
      0003D9 75 8A B0         [24] 1147 	mov	_TL0,#0xb0
                                   1148 ;	Computer.c:108: timer_count++;
      0003DC 05*00            [12] 1149 	inc	_timer_count
                                   1150 ;	Computer.c:109: if (timer_count == 20)
      0003DE 74 14            [12] 1151 	mov	a,#0x14
      0003E0 B5*00 09         [24] 1152 	cjne	a,_timer_count,00103$
                                   1153 ;	Computer.c:111: Keypad_flag = 1;
                                   1154 ;	assignBit
      0003E3 D2*01            [12] 1155 	setb	_Keypad_flag
                                   1156 ;	Computer.c:112: TF0 = 0;
                                   1157 ;	assignBit
      0003E5 C2 8D            [12] 1158 	clr	_TF0
                                   1159 ;	Computer.c:114: TR0 = 0;
                                   1160 ;	assignBit
      0003E7 C2 8C            [12] 1161 	clr	_TR0
                                   1162 ;	Computer.c:116: timer_count = 0;
      0003E9 75*00 00         [24] 1163 	mov	_timer_count,#0x00
      0003EC                       1164 00103$:
                                   1165 ;	Computer.c:118: }
      0003EC D0 D0            [24] 1166 	pop	psw
      0003EE D0 E0            [24] 1167 	pop	acc
      0003F0 32               [24] 1168 	reti
                                   1169 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1170 ;	eliminated unneeded push/pop dpl
                                   1171 ;	eliminated unneeded push/pop dph
                                   1172 ;	eliminated unneeded push/pop b
                                   1173 ;------------------------------------------------------------
                                   1174 ;Allocation info for local variables in function 'Base_init'
                                   1175 ;------------------------------------------------------------
                                   1176 ;	Computer.c:120: void Base_init(void)
                                   1177 ;	-----------------------------------------
                                   1178 ;	 function Base_init
                                   1179 ;	-----------------------------------------
      0003F1                       1180 _Base_init:
                           000007  1181 	ar7 = 0x07
                           000006  1182 	ar6 = 0x06
                           000005  1183 	ar5 = 0x05
                           000004  1184 	ar4 = 0x04
                           000003  1185 	ar3 = 0x03
                           000002  1186 	ar2 = 0x02
                           000001  1187 	ar1 = 0x01
                           000000  1188 	ar0 = 0x00
                                   1189 ;	Computer.c:122: IE = 0x8a;
      0003F1 75 A8 8A         [24] 1190 	mov	_IE,#0x8a
                                   1191 ;	Computer.c:124: TMOD = 0x10;
      0003F4 75 89 10         [24] 1192 	mov	_TMOD,#0x10
                                   1193 ;	Computer.c:126: }
      0003F7 22               [24] 1194 	ret
                                   1195 ;------------------------------------------------------------
                                   1196 ;Allocation info for local variables in function 'Base_timer'
                                   1197 ;------------------------------------------------------------
                                   1198 ;	Computer.c:128: void Base_timer(void) __interrupt(3) __using(2)
                                   1199 ;	-----------------------------------------
                                   1200 ;	 function Base_timer
                                   1201 ;	-----------------------------------------
      0003F8                       1202 _Base_timer:
                           000017  1203 	ar7 = 0x17
                           000016  1204 	ar6 = 0x16
                           000015  1205 	ar5 = 0x15
                           000014  1206 	ar4 = 0x14
                           000013  1207 	ar3 = 0x13
                           000012  1208 	ar2 = 0x12
                           000011  1209 	ar1 = 0x11
                           000010  1210 	ar0 = 0x10
      0003F8 C0 D0            [24] 1211 	push	psw
      0003FA 75 D0 10         [24] 1212 	mov	psw,#0x10
                                   1213 ;	Computer.c:130: TH1 = (65536 - 50000) / 256;
      0003FD 75 8D 3C         [24] 1214 	mov	_TH1,#0x3c
                                   1215 ;	Computer.c:131: TL1 = (65536 - 50000) % 256;
      000400 75 8B B0         [24] 1216 	mov	_TL1,#0xb0
                                   1217 ;	Computer.c:132: base_flag = 1;
      000403 78r2F            [12] 1218 	mov	r0,#_base_flag
      000405 76 01            [12] 1219 	mov	@r0,#0x01
                                   1220 ;	Computer.c:133: TF1 = 0;
                                   1221 ;	assignBit
      000407 C2 8F            [12] 1222 	clr	_TF1
                                   1223 ;	Computer.c:135: TR1 = 0;
                                   1224 ;	assignBit
      000409 C2 8E            [12] 1225 	clr	_TR1
                                   1226 ;	Computer.c:137: }
      00040B D0 D0            [24] 1227 	pop	psw
      00040D 32               [24] 1228 	reti
                                   1229 ;	eliminated unneeded push/pop dpl
                                   1230 ;	eliminated unneeded push/pop dph
                                   1231 ;	eliminated unneeded push/pop b
                                   1232 ;	eliminated unneeded push/pop acc
                                   1233 ;------------------------------------------------------------
                                   1234 ;Allocation info for local variables in function 'clean'
                                   1235 ;------------------------------------------------------------
                                   1236 ;f                         Allocated to registers r7 
                                   1237 ;------------------------------------------------------------
                                   1238 ;	Computer.c:139: void clean()
                                   1239 ;	-----------------------------------------
                                   1240 ;	 function clean
                                   1241 ;	-----------------------------------------
      00040E                       1242 _clean:
                           000007  1243 	ar7 = 0x07
                           000006  1244 	ar6 = 0x06
                           000005  1245 	ar5 = 0x05
                           000004  1246 	ar4 = 0x04
                           000003  1247 	ar3 = 0x03
                           000002  1248 	ar2 = 0x02
                           000001  1249 	ar1 = 0x01
                           000000  1250 	ar0 = 0x00
                                   1251 ;	Computer.c:141: flag = 0;
      00040E 78r08            [12] 1252 	mov	r0,#_flag
      000410 76 00            [12] 1253 	mov	@r0,#0x00
                                   1254 ;	Computer.c:142: for (char f = 0; f < 8; f++)
      000412 7F 00            [12] 1255 	mov	r7,#0x00
      000414                       1256 00103$:
      000414 BF 08 00         [24] 1257 	cjne	r7,#0x08,00120$
      000417                       1258 00120$:
      000417 50 09            [24] 1259 	jnc	00105$
                                   1260 ;	Computer.c:144: buffer[f] = -1;
      000419 EF               [12] 1261 	mov	a,r7
      00041A 24r00            [12] 1262 	add	a, #_buffer
      00041C F8               [12] 1263 	mov	r0,a
      00041D 76 FF            [12] 1264 	mov	@r0,#0xff
                                   1265 ;	Computer.c:142: for (char f = 0; f < 8; f++)
      00041F 0F               [12] 1266 	inc	r7
      000420 80 F2            [24] 1267 	sjmp	00103$
      000422                       1268 00105$:
                                   1269 ;	Computer.c:147: }
      000422 22               [24] 1270 	ret
                                   1271 ;------------------------------------------------------------
                                   1272 ;Allocation info for local variables in function 'main'
                                   1273 ;------------------------------------------------------------
                                   1274 ;count                     Allocated to registers r7 
                                   1275 ;m                         Allocated to registers r6 
                                   1276 ;i                         Allocated to registers r7 
                                   1277 ;m                         Allocated to registers r7 
                                   1278 ;m                         Allocated to registers r7 
                                   1279 ;m                         Allocated to registers r7 
                                   1280 ;m                         Allocated to registers r7 
                                   1281 ;count                     Allocated to registers 
                                   1282 ;m                         Allocated to registers r7 
                                   1283 ;num_1                     Allocated with name '_main_num_1_10000_38'
                                   1284 ;num_2                     Allocated with name '_main_num_2_10000_38'
                                   1285 ;ans                       Allocated with name '_main_ans_10000_38'
                                   1286 ;op                        Allocated with name '_main_op_10000_38'
                                   1287 ;negative_num1             Allocated with name '_main_negative_num1_10000_38'
                                   1288 ;negative_num2             Allocated with name '_main_negative_num2_10000_38'
                                   1289 ;negative_ans              Allocated with name '_main_negative_ans_10000_38'
                                   1290 ;------------------------------------------------------------
                                   1291 ;	Computer.c:148: void main(void)
                                   1292 ;	-----------------------------------------
                                   1293 ;	 function main
                                   1294 ;	-----------------------------------------
      000423                       1295 _main:
                                   1296 ;	Computer.c:150: __idata int num_1 = 0, num_2 = 0, ans = 0;
      000423 78r30            [12] 1297 	mov	r0,#_main_num_1_10000_38
      000425 E4               [12] 1298 	clr	a
      000426 F6               [12] 1299 	mov	@r0,a
      000427 08               [12] 1300 	inc	r0
      000428 F6               [12] 1301 	mov	@r0,a
      000429 78r32            [12] 1302 	mov	r0,#_main_num_2_10000_38
      00042B F6               [12] 1303 	mov	@r0,a
      00042C 08               [12] 1304 	inc	r0
      00042D F6               [12] 1305 	mov	@r0,a
      00042E 78r34            [12] 1306 	mov	r0,#_main_ans_10000_38
      000430 F6               [12] 1307 	mov	@r0,a
      000431 08               [12] 1308 	inc	r0
      000432 F6               [12] 1309 	mov	@r0,a
                                   1310 ;	Computer.c:151: __idata char op = '$';
      000433 78r36            [12] 1311 	mov	r0,#_main_op_10000_38
      000435 76 24            [12] 1312 	mov	@r0,#0x24
                                   1313 ;	Computer.c:153: __idata int negative_num1 = -1, negative_num2 = -1, negative_ans = 0;
      000437 78r37            [12] 1314 	mov	r0,#_main_negative_num1_10000_38
      000439 76 FF            [12] 1315 	mov	@r0,#0xff
      00043B 08               [12] 1316 	inc	r0
      00043C 76 FF            [12] 1317 	mov	@r0,#0xff
      00043E 78r39            [12] 1318 	mov	r0,#_main_negative_num2_10000_38
      000440 76 FF            [12] 1319 	mov	@r0,#0xff
      000442 08               [12] 1320 	inc	r0
      000443 76 FF            [12] 1321 	mov	@r0,#0xff
      000445 78r3B            [12] 1322 	mov	r0,#_main_negative_ans_10000_38
      000447 F6               [12] 1323 	mov	@r0,a
      000448 08               [12] 1324 	inc	r0
      000449 F6               [12] 1325 	mov	@r0,a
                                   1326 ;	Computer.c:154: Base_init();
      00044A 12r03rF1         [24] 1327 	lcall	_Base_init
                                   1328 ;	Computer.c:156: Keypad_Debounce_init();
      00044D 12r03rCB         [24] 1329 	lcall	_Keypad_Debounce_init
                                   1330 ;	Computer.c:159: while (1)
      000450                       1331 00131$:
                                   1332 ;	Computer.c:161: TR0 = 1;
                                   1333 ;	assignBit
      000450 D2 8C            [12] 1334 	setb	_TR0
                                   1335 ;	Computer.c:163: number = ReadKeypad();
      000452 12r00r00         [24] 1336 	lcall	_ReadKeypad
                                   1337 ;	Computer.c:165: if (number >= 0 && number <= 15)
      000455 E5 82            [12] 1338 	mov	a,dpl
      000457 F5*01            [12] 1339 	mov	_number,a
      000459 24 F0            [12] 1340 	add	a,#0xff - 0x0f
      00045B 50 03            [24] 1341 	jnc	00313$
      00045D 02r07r6B         [24] 1342 	ljmp	00128$
      000460                       1343 00313$:
                                   1344 ;	Computer.c:168: if (number == 10)
      000460 74 0A            [12] 1345 	mov	a,#0x0a
      000462 B5*01 33         [24] 1346 	cjne	a,_number,00103$
                                   1347 ;	Computer.c:170: TR1 = 1;
                                   1348 ;	assignBit
      000465 D2 8E            [12] 1349 	setb	_TR1
                                   1350 ;	Computer.c:172: char count = history_start[history_count];
      000467 78r2D            [12] 1351 	mov	r0,#_history_count
      000469 E6               [12] 1352 	mov	a,@r0
      00046A 24r13            [12] 1353 	add	a, #_history_start
      00046C F9               [12] 1354 	mov	r1,a
      00046D 87 07            [24] 1355 	mov	ar7,@r1
                                   1356 ;	Computer.c:173: for (char m = 0; m < 100; m++)
      00046F 7E 00            [12] 1357 	mov	r6,#0x00
      000471                       1358 00134$:
      000471 BE 64 00         [24] 1359 	cjne	r6,#0x64,00316$
      000474                       1360 00316$:
      000474 50 1A            [24] 1361 	jnc	00101$
                                   1362 ;	Computer.c:175: Show_History(history, start, count);
      000476 78r2E            [12] 1363 	mov	r0,#_start
      000478 86*00            [24] 1364 	mov	_Show_History_PARM_2,@r0
      00047A 8F*00            [24] 1365 	mov	_Show_History_PARM_3,r7
      00047C 90r00r09         [24] 1366 	mov	dptr,#_history
      00047F 75 F0 40         [24] 1367 	mov	b, #0x40
      000482 C0 07            [24] 1368 	push	ar7
      000484 C0 06            [24] 1369 	push	ar6
      000486 12r00r00         [24] 1370 	lcall	_Show_History
      000489 D0 06            [24] 1371 	pop	ar6
      00048B D0 07            [24] 1372 	pop	ar7
                                   1373 ;	Computer.c:173: for (char m = 0; m < 100; m++)
      00048D 0E               [12] 1374 	inc	r6
      00048E 80 E1            [24] 1375 	sjmp	00134$
      000490                       1376 00101$:
                                   1377 ;	Computer.c:177: start += count;
      000490 78r2E            [12] 1378 	mov	r0,#_start
      000492 EF               [12] 1379 	mov	a,r7
      000493 26               [12] 1380 	add	a, @r0
      000494 F6               [12] 1381 	mov	@r0,a
                                   1382 ;	Computer.c:178: history_count++;
      000495 78r2D            [12] 1383 	mov	r0,#_history_count
      000497 06               [12] 1384 	inc	@r0
      000498                       1385 00103$:
                                   1386 ;	Computer.c:182: if (base_flag == 1)
      000498 78r2F            [12] 1387 	mov	r0,#_base_flag
      00049A B6 01 02         [24] 1388 	cjne	@r0,#0x01,00318$
      00049D 80 03            [24] 1389 	sjmp	00319$
      00049F                       1390 00318$:
      00049F 02r05r90         [24] 1391 	ljmp	00125$
      0004A2                       1392 00319$:
                                   1393 ;	Computer.c:184: for (char i = 0; i < 8; i++)
      0004A2 7F 00            [12] 1394 	mov	r7,#0x00
      0004A4                       1395 00137$:
      0004A4 BF 08 00         [24] 1396 	cjne	r7,#0x08,00320$
      0004A7                       1397 00320$:
      0004A7 50 36            [24] 1398 	jnc	00104$
                                   1399 ;	Computer.c:186: flag <<= 1;
      0004A9 78r08            [12] 1400 	mov	r0,#_flag
      0004AB 86 06            [24] 1401 	mov	ar6,@r0
      0004AD 78r08            [12] 1402 	mov	r0,#_flag
      0004AF EE               [12] 1403 	mov	a,r6
      0004B0 2E               [12] 1404 	add	a,r6
      0004B1 F6               [12] 1405 	mov	@r0,a
                                   1406 ;	Computer.c:187: flag |= Base_num[base_index - 1] & 1;
      0004B2 78r2C            [12] 1407 	mov	r0,#_base_index
      0004B4 86 06            [24] 1408 	mov	ar6,@r0
      0004B6 1E               [12] 1409 	dec	r6
      0004B7 EE               [12] 1410 	mov	a,r6
      0004B8 2E               [12] 1411 	add	a,r6
      0004B9 24r1D            [12] 1412 	add	a, #_Base_num
      0004BB F9               [12] 1413 	mov	r1,a
      0004BC 87 06            [24] 1414 	mov	ar6,@r1
      0004BE 53 06 01         [24] 1415 	anl	ar6,#0x01
      0004C1 78r08            [12] 1416 	mov	r0,#_flag
      0004C3 86 E0            [24] 1417 	mov	acc,@r0
      0004C5 4E               [12] 1418 	orl	a,r6
      0004C6 78r08            [12] 1419 	mov	r0,#_flag
      0004C8 F6               [12] 1420 	mov	@r0,a
                                   1421 ;	Computer.c:188: Base_num[base_index - 1] >>= 1;
      0004C9 87 05            [24] 1422 	mov	ar5,@r1
      0004CB 09               [12] 1423 	inc	r1
      0004CC 87 06            [24] 1424 	mov	ar6,@r1
      0004CE 19               [12] 1425 	dec	r1
      0004CF EE               [12] 1426 	mov	a,r6
      0004D0 C3               [12] 1427 	clr	c
      0004D1 13               [12] 1428 	rrc	a
      0004D2 CD               [12] 1429 	xch	a,r5
      0004D3 13               [12] 1430 	rrc	a
      0004D4 CD               [12] 1431 	xch	a,r5
      0004D5 FE               [12] 1432 	mov	r6,a
      0004D6 A7 05            [24] 1433 	mov	@r1,ar5
      0004D8 09               [12] 1434 	inc	r1
      0004D9 A7 06            [24] 1435 	mov	@r1,ar6
      0004DB 19               [12] 1436 	dec	r1
                                   1437 ;	Computer.c:184: for (char i = 0; i < 8; i++)
      0004DC 0F               [12] 1438 	inc	r7
      0004DD 80 C5            [24] 1439 	sjmp	00137$
      0004DF                       1440 00104$:
                                   1441 ;	Computer.c:190: if (negative_base[base_index - 1] == 1)
      0004DF 78r2C            [12] 1442 	mov	r0,#_base_index
      0004E1 E6               [12] 1443 	mov	a,@r0
      0004E2 14               [12] 1444 	dec	a
      0004E3 24r27            [12] 1445 	add	a, #_negative_base
      0004E5 F9               [12] 1446 	mov	r1,a
      0004E6 87 07            [24] 1447 	mov	ar7,@r1
      0004E8 BF 01 53         [24] 1448 	cjne	r7,#0x01,00169$
                                   1449 ;	Computer.c:192: flag = ~flag;
      0004EB 78r08            [12] 1450 	mov	r0,#_flag
      0004ED E6               [12] 1451 	mov	a,@r0
      0004EE F4               [12] 1452 	cpl	a
      0004EF F6               [12] 1453 	mov	@r0,a
                                   1454 ;	Computer.c:193: flag += 1;
      0004F0 78r08            [12] 1455 	mov	r0,#_flag
      0004F2 86 07            [24] 1456 	mov	ar7,@r0
      0004F4 78r08            [12] 1457 	mov	r0,#_flag
      0004F6 EF               [12] 1458 	mov	a,r7
      0004F7 04               [12] 1459 	inc	a
      0004F8 F6               [12] 1460 	mov	@r0,a
                                   1461 ;	Computer.c:194: for (char m = 0; m < 8; m++)
      0004F9 7F 00            [12] 1462 	mov	r7,#0x00
      0004FB                       1463 00140$:
      0004FB BF 08 00         [24] 1464 	cjne	r7,#0x08,00324$
      0004FE                       1465 00324$:
      0004FE 50 24            [24] 1466 	jnc	00105$
                                   1467 ;	Computer.c:196: SaveNumber(flag & 1, 7, buffer);
      000500 78r08            [12] 1468 	mov	r0,#_flag
      000502 86 E0            [24] 1469 	mov	acc,@r0
      000504 54 01            [12] 1470 	anl	a,#0x01
      000506 F5 82            [12] 1471 	mov	dpl,a
      000508 75*01r00         [24] 1472 	mov	_SaveNumber_PARM_3,#_buffer
      00050B 75*02 00         [24] 1473 	mov	(_SaveNumber_PARM_3 + 1),#0x00
      00050E 75*03 40         [24] 1474 	mov	(_SaveNumber_PARM_3 + 2),#0x40
      000511 75*00 07         [24] 1475 	mov	_SaveNumber_PARM_2,#0x07
      000514 C0 07            [24] 1476 	push	ar7
      000516 12r00r81         [24] 1477 	lcall	_SaveNumber
      000519 D0 07            [24] 1478 	pop	ar7
                                   1479 ;	Computer.c:197: flag >>= 1;
      00051B 78r08            [12] 1480 	mov	r0,#_flag
      00051D E6               [12] 1481 	mov	a,@r0
      00051E C3               [12] 1482 	clr	c
      00051F 13               [12] 1483 	rrc	a
      000520 F6               [12] 1484 	mov	@r0,a
                                   1485 ;	Computer.c:194: for (char m = 0; m < 8; m++)
      000521 0F               [12] 1486 	inc	r7
      000522 80 D7            [24] 1487 	sjmp	00140$
      000524                       1488 00105$:
                                   1489 ;	Computer.c:199: for (char m = 0; m < 100; m++)
      000524 7F 00            [12] 1490 	mov	r7,#0x00
      000526                       1491 00143$:
      000526 BF 64 00         [24] 1492 	cjne	r7,#0x64,00326$
      000529                       1493 00326$:
      000529 50 58            [24] 1494 	jnc	00111$
                                   1495 ;	Computer.c:201: Show_Ans(buffer, 0xff);
      00052B 75*00 FF         [24] 1496 	mov	_Show_Ans_PARM_2,#0xff
      00052E 90r00r00         [24] 1497 	mov	dptr,#_buffer
      000531 75 F0 40         [24] 1498 	mov	b, #0x40
      000534 C0 07            [24] 1499 	push	ar7
      000536 12r00r00         [24] 1500 	lcall	_Show_Ans
      000539 D0 07            [24] 1501 	pop	ar7
                                   1502 ;	Computer.c:199: for (char m = 0; m < 100; m++)
      00053B 0F               [12] 1503 	inc	r7
                                   1504 ;	Computer.c:206: for (char m = 0; m < 8; m++)
      00053C 80 E8            [24] 1505 	sjmp	00143$
      00053E                       1506 00169$:
      00053E 7F 00            [12] 1507 	mov	r7,#0x00
      000540                       1508 00146$:
      000540 BF 08 00         [24] 1509 	cjne	r7,#0x08,00328$
      000543                       1510 00328$:
      000543 50 24            [24] 1511 	jnc	00107$
                                   1512 ;	Computer.c:208: SaveNumber(flag & 1, 7, buffer);
      000545 78r08            [12] 1513 	mov	r0,#_flag
      000547 86 E0            [24] 1514 	mov	acc,@r0
      000549 54 01            [12] 1515 	anl	a,#0x01
      00054B F5 82            [12] 1516 	mov	dpl,a
      00054D 75*01r00         [24] 1517 	mov	_SaveNumber_PARM_3,#_buffer
      000550 75*02 00         [24] 1518 	mov	(_SaveNumber_PARM_3 + 1),#0x00
      000553 75*03 40         [24] 1519 	mov	(_SaveNumber_PARM_3 + 2),#0x40
      000556 75*00 07         [24] 1520 	mov	_SaveNumber_PARM_2,#0x07
      000559 C0 07            [24] 1521 	push	ar7
      00055B 12r00r81         [24] 1522 	lcall	_SaveNumber
      00055E D0 07            [24] 1523 	pop	ar7
                                   1524 ;	Computer.c:209: flag >>= 1;
      000560 78r08            [12] 1525 	mov	r0,#_flag
      000562 E6               [12] 1526 	mov	a,@r0
      000563 C3               [12] 1527 	clr	c
      000564 13               [12] 1528 	rrc	a
      000565 F6               [12] 1529 	mov	@r0,a
                                   1530 ;	Computer.c:206: for (char m = 0; m < 8; m++)
      000566 0F               [12] 1531 	inc	r7
      000567 80 D7            [24] 1532 	sjmp	00146$
      000569                       1533 00107$:
                                   1534 ;	Computer.c:211: for (char m = 0; m < 100; m++)
      000569 7F 00            [12] 1535 	mov	r7,#0x00
      00056B                       1536 00149$:
      00056B BF 64 00         [24] 1537 	cjne	r7,#0x64,00330$
      00056E                       1538 00330$:
      00056E 50 13            [24] 1539 	jnc	00111$
                                   1540 ;	Computer.c:213: Show(buffer, 0xff);
      000570 75*00 FF         [24] 1541 	mov	_Show_PARM_2,#0xff
      000573 90r00r00         [24] 1542 	mov	dptr,#_buffer
      000576 75 F0 40         [24] 1543 	mov	b, #0x40
      000579 C0 07            [24] 1544 	push	ar7
      00057B 12r00r00         [24] 1545 	lcall	_Show
      00057E D0 07            [24] 1546 	pop	ar7
                                   1547 ;	Computer.c:211: for (char m = 0; m < 100; m++)
      000580 0F               [12] 1548 	inc	r7
      000581 80 E8            [24] 1549 	sjmp	00149$
      000583                       1550 00111$:
                                   1551 ;	Computer.c:217: base_flag = 0;
      000583 78r2F            [12] 1552 	mov	r0,#_base_flag
      000585 76 00            [12] 1553 	mov	@r0,#0x00
                                   1554 ;	Computer.c:218: base_index--;
      000587 78r2C            [12] 1555 	mov	r0,#_base_index
      000589 16               [12] 1556 	dec	@r0
                                   1557 ;	Computer.c:219: clean();
      00058A 12r04r0E         [24] 1558 	lcall	_clean
      00058D 02r07r6B         [24] 1559 	ljmp	00128$
      000590                       1560 00125$:
                                   1561 ;	Computer.c:222: else if (Keypad_flag == 1)
      000590 20*01 03         [24] 1562 	jb	_Keypad_flag,00332$
      000593 02r07r6B         [24] 1563 	ljmp	00128$
      000596                       1564 00332$:
                                   1565 ;	Computer.c:226: flag <<= 1;
      000596 78r08            [12] 1566 	mov	r0,#_flag
      000598 86 07            [24] 1567 	mov	ar7,@r0
      00059A 78r08            [12] 1568 	mov	r0,#_flag
      00059C EF               [12] 1569 	mov	a,r7
      00059D 2F               [12] 1570 	add	a,r7
      00059E F6               [12] 1571 	mov	@r0,a
                                   1572 ;	Computer.c:227: flag |= 0x01;
      00059F 78r08            [12] 1573 	mov	r0,#_flag
      0005A1 E6               [12] 1574 	mov	a,@r0
      0005A2 44 01            [12] 1575 	orl	a,#0x01
      0005A4 F6               [12] 1576 	mov	@r0,a
                                   1577 ;	Computer.c:229: SaveNumber(number, 7, buffer);
      0005A5 75*01r00         [24] 1578 	mov	_SaveNumber_PARM_3,#_buffer
      0005A8 75*02 00         [24] 1579 	mov	(_SaveNumber_PARM_3 + 1),#0x00
      0005AB 75*03 40         [24] 1580 	mov	(_SaveNumber_PARM_3 + 2),#0x40
      0005AE 75*00 07         [24] 1581 	mov	_SaveNumber_PARM_2,#0x07
      0005B1 85*01 82         [24] 1582 	mov	dpl, _number
      0005B4 12r00r81         [24] 1583 	lcall	_SaveNumber
                                   1584 ;	Computer.c:231: Update_Expression(&num_1, &num_2, &op, &negative_num1, &negative_num2);
      0005B7 75*03r32         [24] 1585 	mov	_Update_Expression_PARM_2,#_main_num_2_10000_38
      0005BA 75*04 00         [24] 1586 	mov	(_Update_Expression_PARM_2 + 1),#0x00
      0005BD 75*05 40         [24] 1587 	mov	(_Update_Expression_PARM_2 + 2),#0x40
      0005C0 75*06r36         [24] 1588 	mov	_Update_Expression_PARM_3,#_main_op_10000_38
      0005C3 75*07 00         [24] 1589 	mov	(_Update_Expression_PARM_3 + 1),#0x00
      0005C6 75*08 40         [24] 1590 	mov	(_Update_Expression_PARM_3 + 2),#0x40
      0005C9 75*09r37         [24] 1591 	mov	_Update_Expression_PARM_4,#_main_negative_num1_10000_38
      0005CC 75*0A 00         [24] 1592 	mov	(_Update_Expression_PARM_4 + 1),#0x00
      0005CF 75*0B 40         [24] 1593 	mov	(_Update_Expression_PARM_4 + 2),#0x40
      0005D2 75*0Cr39         [24] 1594 	mov	_Update_Expression_PARM_5,#_main_negative_num2_10000_38
      0005D5 75*0D 00         [24] 1595 	mov	(_Update_Expression_PARM_5 + 1),#0x00
      0005D8 75*0E 40         [24] 1596 	mov	(_Update_Expression_PARM_5 + 2),#0x40
      0005DB 90r00r30         [24] 1597 	mov	dptr,#_main_num_1_10000_38
      0005DE 75 F0 40         [24] 1598 	mov	b, #0x40
      0005E1 12r00rCA         [24] 1599 	lcall	_Update_Expression
                                   1600 ;	Computer.c:233: if (cal_flag == 1)
      0005E4 20*00 03         [24] 1601 	jb	_cal_flag,00333$
      0005E7 02r07r69         [24] 1602 	ljmp	00121$
      0005EA                       1603 00333$:
                                   1604 ;	Computer.c:236: Calculate(num_1, num_2, op, negative_num1, negative_num2, &ans);
      0005EA 75*1Cr34         [24] 1605 	mov	_Calculate_PARM_6,#_main_ans_10000_38
      0005ED 75*1D 00         [24] 1606 	mov	(_Calculate_PARM_6 + 1),#0x00
      0005F0 75*1E 40         [24] 1607 	mov	(_Calculate_PARM_6 + 2),#0x40
      0005F3 78r32            [12] 1608 	mov	r0,#_main_num_2_10000_38
      0005F5 86*15            [24] 1609 	mov	_Calculate_PARM_2,@r0
      0005F7 08               [12] 1610 	inc	r0
      0005F8 86*16            [24] 1611 	mov	(_Calculate_PARM_2 + 1),@r0
      0005FA 78r36            [12] 1612 	mov	r0,#_main_op_10000_38
      0005FC 86*17            [24] 1613 	mov	_Calculate_PARM_3,@r0
      0005FE 78r37            [12] 1614 	mov	r0,#_main_negative_num1_10000_38
      000600 86*18            [24] 1615 	mov	_Calculate_PARM_4,@r0
      000602 08               [12] 1616 	inc	r0
      000603 86*19            [24] 1617 	mov	(_Calculate_PARM_4 + 1),@r0
      000605 78r39            [12] 1618 	mov	r0,#_main_negative_num2_10000_38
      000607 86*1A            [24] 1619 	mov	_Calculate_PARM_5,@r0
      000609 08               [12] 1620 	inc	r0
      00060A 86*1B            [24] 1621 	mov	(_Calculate_PARM_5 + 1),@r0
      00060C 78r30            [12] 1622 	mov	r0,#_main_num_1_10000_38
      00060E 86 82            [24] 1623 	mov	dpl, @r0
      000610 08               [12] 1624 	inc	r0
      000611 86 83            [24] 1625 	mov	dph, @r0
      000613 12r02r15         [24] 1626 	lcall	_Calculate
                                   1627 ;	Computer.c:239: if (ans < 0)
      000616 78r35            [12] 1628 	mov	r0,#(_main_ans_10000_38 + 1)
      000618 E6               [12] 1629 	mov	a,@r0
      000619 30 E7 19         [24] 1630 	jnb	acc.7,00113$
                                   1631 ;	Computer.c:241: ans = -ans;
      00061C 78r34            [12] 1632 	mov	r0,#_main_ans_10000_38
      00061E C3               [12] 1633 	clr	c
      00061F E4               [12] 1634 	clr	a
      000620 96               [12] 1635 	subb	a,@r0
      000621 F6               [12] 1636 	mov	@r0,a
      000622 08               [12] 1637 	inc	r0
      000623 E4               [12] 1638 	clr	a
      000624 96               [12] 1639 	subb	a,@r0
      000625 F6               [12] 1640 	mov	@r0,a
                                   1641 ;	Computer.c:242: negative_ans = 1;
      000626 78r3B            [12] 1642 	mov	r0,#_main_negative_ans_10000_38
      000628 76 01            [12] 1643 	mov	@r0,#0x01
      00062A 08               [12] 1644 	inc	r0
      00062B 76 00            [12] 1645 	mov	@r0,#0x00
                                   1646 ;	Computer.c:243: negative_base[base_index] = 1;
      00062D 78r2C            [12] 1647 	mov	r0,#_base_index
      00062F E6               [12] 1648 	mov	a,@r0
      000630 24r27            [12] 1649 	add	a, #_negative_base
      000632 F8               [12] 1650 	mov	r0,a
      000633 76 01            [12] 1651 	mov	@r0,#0x01
      000635                       1652 00113$:
                                   1653 ;	Computer.c:245: Base_num[base_index] = ans;
      000635 78r2C            [12] 1654 	mov	r0,#_base_index
      000637 E6               [12] 1655 	mov	a,@r0
      000638 25 E0            [12] 1656 	add	a,acc
      00063A 24r1D            [12] 1657 	add	a, #_Base_num
      00063C F8               [12] 1658 	mov	r0,a
      00063D 79r34            [12] 1659 	mov	r1,#_main_ans_10000_38
      00063F E7               [12] 1660 	mov	a,@r1
      000640 F6               [12] 1661 	mov	@r0,a
      000641 08               [12] 1662 	inc	r0
      000642 09               [12] 1663 	inc	r1
      000643 E7               [12] 1664 	mov	a,@r1
      000644 F6               [12] 1665 	mov	@r0,a
                                   1666 ;	Computer.c:246: base_index++;
      000645 78r2C            [12] 1667 	mov	r0,#_base_index
      000647 06               [12] 1668 	inc	@r0
                                   1669 ;	Computer.c:248: clean();
      000648 12r04r0E         [24] 1670 	lcall	_clean
                                   1671 ;	Computer.c:250: do
      00064B                       1672 00114$:
                                   1673 ;	Computer.c:252: SaveNumber(ans % 10, 9, history);
      00064B 75*00 0A         [24] 1674 	mov	__modsint_PARM_2,#0x0a
      00064E 75*01 00         [24] 1675 	mov	(__modsint_PARM_2 + 1),#0x00
      000651 78r34            [12] 1676 	mov	r0,#_main_ans_10000_38
      000653 86 82            [24] 1677 	mov	dpl, @r0
      000655 08               [12] 1678 	inc	r0
      000656 86 83            [24] 1679 	mov	dph, @r0
      000658 12r00r00         [24] 1680 	lcall	__modsint
      00065B 75*01r09         [24] 1681 	mov	_SaveNumber_PARM_3,#_history
      00065E 75*02 00         [24] 1682 	mov	(_SaveNumber_PARM_3 + 1),#0x00
      000661 75*03 40         [24] 1683 	mov	(_SaveNumber_PARM_3 + 2),#0x40
      000664 75*00 09         [24] 1684 	mov	_SaveNumber_PARM_2,#0x09
      000667 12r00r81         [24] 1685 	lcall	_SaveNumber
                                   1686 ;	Computer.c:253: SaveNumber(ans % 10, 7, buffer);
      00066A 75*00 0A         [24] 1687 	mov	__modsint_PARM_2,#0x0a
      00066D 75*01 00         [24] 1688 	mov	(__modsint_PARM_2 + 1),#0x00
      000670 78r34            [12] 1689 	mov	r0,#_main_ans_10000_38
      000672 86 82            [24] 1690 	mov	dpl, @r0
      000674 08               [12] 1691 	inc	r0
      000675 86 83            [24] 1692 	mov	dph, @r0
      000677 12r00r00         [24] 1693 	lcall	__modsint
      00067A 75*01r00         [24] 1694 	mov	_SaveNumber_PARM_3,#_buffer
      00067D 75*02 00         [24] 1695 	mov	(_SaveNumber_PARM_3 + 1),#0x00
      000680 75*03 40         [24] 1696 	mov	(_SaveNumber_PARM_3 + 2),#0x40
      000683 75*00 07         [24] 1697 	mov	_SaveNumber_PARM_2,#0x07
      000686 12r00r81         [24] 1698 	lcall	_SaveNumber
                                   1699 ;	Computer.c:254: ans /= 10;
      000689 75*00 0A         [24] 1700 	mov	__divsint_PARM_2,#0x0a
      00068C 75*01 00         [24] 1701 	mov	(__divsint_PARM_2 + 1),#0x00
      00068F 78r34            [12] 1702 	mov	r0,#_main_ans_10000_38
      000691 86 82            [24] 1703 	mov	dpl, @r0
      000693 08               [12] 1704 	inc	r0
      000694 86 83            [24] 1705 	mov	dph, @r0
      000696 12r00r00         [24] 1706 	lcall	__divsint
      000699 E5 82            [12] 1707 	mov	a, dpl
      00069B 85 83 F0         [24] 1708 	mov	b, dph
      00069E 78r34            [12] 1709 	mov	r0,#_main_ans_10000_38
      0006A0 F6               [12] 1710 	mov	@r0,a
      0006A1 08               [12] 1711 	inc	r0
      0006A2 A6 F0            [24] 1712 	mov	@r0,b
                                   1713 ;	Computer.c:255: flag <<= 1;
      0006A4 78r08            [12] 1714 	mov	r0,#_flag
      0006A6 86 07            [24] 1715 	mov	ar7,@r0
      0006A8 78r08            [12] 1716 	mov	r0,#_flag
      0006AA EF               [12] 1717 	mov	a,r7
      0006AB 2F               [12] 1718 	add	a,r7
      0006AC F6               [12] 1719 	mov	@r0,a
                                   1720 ;	Computer.c:256: flag |= 0x01;
      0006AD 78r08            [12] 1721 	mov	r0,#_flag
      0006AF E6               [12] 1722 	mov	a,@r0
      0006B0 44 01            [12] 1723 	orl	a,#0x01
      0006B2 F6               [12] 1724 	mov	@r0,a
                                   1725 ;	Computer.c:257: } while (ans);
      0006B3 78r34            [12] 1726 	mov	r0,#_main_ans_10000_38
      0006B5 E6               [12] 1727 	mov	a,@r0
      0006B6 08               [12] 1728 	inc	r0
      0006B7 46               [12] 1729 	orl	a,@r0
      0006B8 70 91            [24] 1730 	jnz	00114$
                                   1731 ;	Computer.c:259: if (negative_ans == 1)
      0006BA 78r3B            [12] 1732 	mov	r0,#_main_negative_ans_10000_38
      0006BC B6 01 37         [24] 1733 	cjne	@r0,#0x01,00118$
      0006BF 08               [12] 1734 	inc	r0
      0006C0 B6 00 33         [24] 1735 	cjne	@r0,#0x00,00118$
                                   1736 ;	Computer.c:261: SaveNumber(13, 9, history);
      0006C3 75*01r09         [24] 1737 	mov	_SaveNumber_PARM_3,#_history
      0006C6 75*02 00         [24] 1738 	mov	(_SaveNumber_PARM_3 + 1),#0x00
      0006C9 75*03 40         [24] 1739 	mov	(_SaveNumber_PARM_3 + 2),#0x40
      0006CC 75*00 09         [24] 1740 	mov	_SaveNumber_PARM_2,#0x09
      0006CF 75 82 0D         [24] 1741 	mov	dpl, #0x0d
      0006D2 12r00r81         [24] 1742 	lcall	_SaveNumber
                                   1743 ;	Computer.c:262: SaveNumber(13, 7, buffer);
      0006D5 75*01r00         [24] 1744 	mov	_SaveNumber_PARM_3,#_buffer
      0006D8 75*02 00         [24] 1745 	mov	(_SaveNumber_PARM_3 + 1),#0x00
      0006DB 75*03 40         [24] 1746 	mov	(_SaveNumber_PARM_3 + 2),#0x40
      0006DE 75*00 07         [24] 1747 	mov	_SaveNumber_PARM_2,#0x07
      0006E1 75 82 0D         [24] 1748 	mov	dpl, #0x0d
      0006E4 12r00r81         [24] 1749 	lcall	_SaveNumber
                                   1750 ;	Computer.c:263: flag <<= 1;
      0006E7 78r08            [12] 1751 	mov	r0,#_flag
      0006E9 86 07            [24] 1752 	mov	ar7,@r0
      0006EB 78r08            [12] 1753 	mov	r0,#_flag
      0006ED EF               [12] 1754 	mov	a,r7
      0006EE 2F               [12] 1755 	add	a,r7
      0006EF F6               [12] 1756 	mov	@r0,a
                                   1757 ;	Computer.c:264: flag |= 0x01;
      0006F0 78r08            [12] 1758 	mov	r0,#_flag
      0006F2 E6               [12] 1759 	mov	a,@r0
      0006F3 44 01            [12] 1760 	orl	a,#0x01
      0006F5 F6               [12] 1761 	mov	@r0,a
      0006F6                       1762 00118$:
                                   1763 ;	Computer.c:267: char count = Counter(flag);
      0006F6 78r08            [12] 1764 	mov	r0,#_flag
      0006F8 86 82            [24] 1765 	mov	dpl, @r0
      0006FA 12r00r00         [24] 1766 	lcall	_Counter
                                   1767 ;	Computer.c:268: SaveNumber(count, 9, history_start);
      0006FD 75*01r13         [24] 1768 	mov	_SaveNumber_PARM_3,#_history_start
      000700 75*02 00         [24] 1769 	mov	(_SaveNumber_PARM_3 + 1),#0x00
      000703 75*03 40         [24] 1770 	mov	(_SaveNumber_PARM_3 + 2),#0x40
      000706 75*00 09         [24] 1771 	mov	_SaveNumber_PARM_2,#0x09
      000709 12r00r81         [24] 1772 	lcall	_SaveNumber
                                   1773 ;	Computer.c:269: for (char m = 0; m < 100; m++)
      00070C 7F 00            [12] 1774 	mov	r7,#0x00
      00070E                       1775 00152$:
      00070E BF 64 00         [24] 1776 	cjne	r7,#0x64,00338$
      000711                       1777 00338$:
      000711 50 14            [24] 1778 	jnc	00119$
                                   1779 ;	Computer.c:271: Show_Ans(buffer, flag);
      000713 78r08            [12] 1780 	mov	r0,#_flag
      000715 86*00            [24] 1781 	mov	_Show_Ans_PARM_2,@r0
      000717 90r00r00         [24] 1782 	mov	dptr,#_buffer
      00071A 75 F0 40         [24] 1783 	mov	b, #0x40
      00071D C0 07            [24] 1784 	push	ar7
      00071F 12r00r00         [24] 1785 	lcall	_Show_Ans
      000722 D0 07            [24] 1786 	pop	ar7
                                   1787 ;	Computer.c:269: for (char m = 0; m < 100; m++)
      000724 0F               [12] 1788 	inc	r7
      000725 80 E7            [24] 1789 	sjmp	00152$
      000727                       1790 00119$:
                                   1791 ;	Computer.c:274: clean();
      000727 12r04r0E         [24] 1792 	lcall	_clean
                                   1793 ;	Computer.c:275: Restart(&num_1, &num_2, &op, &ans, &negative_num1, &negative_num2, &negative_ans);
      00072A 75*00r32         [24] 1794 	mov	_Restart_PARM_2,#_main_num_2_10000_38
      00072D 75*01 00         [24] 1795 	mov	(_Restart_PARM_2 + 1),#0x00
      000730 75*02 40         [24] 1796 	mov	(_Restart_PARM_2 + 2),#0x40
      000733 75*03r36         [24] 1797 	mov	_Restart_PARM_3,#_main_op_10000_38
      000736 75*04 00         [24] 1798 	mov	(_Restart_PARM_3 + 1),#0x00
      000739 75*05 40         [24] 1799 	mov	(_Restart_PARM_3 + 2),#0x40
      00073C 75*06r34         [24] 1800 	mov	_Restart_PARM_4,#_main_ans_10000_38
      00073F 75*07 00         [24] 1801 	mov	(_Restart_PARM_4 + 1),#0x00
      000742 75*08 40         [24] 1802 	mov	(_Restart_PARM_4 + 2),#0x40
      000745 75*09r37         [24] 1803 	mov	_Restart_PARM_5,#_main_negative_num1_10000_38
      000748 75*0A 00         [24] 1804 	mov	(_Restart_PARM_5 + 1),#0x00
      00074B 75*0B 40         [24] 1805 	mov	(_Restart_PARM_5 + 2),#0x40
      00074E 75*0Cr39         [24] 1806 	mov	_Restart_PARM_6,#_main_negative_num2_10000_38
      000751 75*0D 00         [24] 1807 	mov	(_Restart_PARM_6 + 1),#0x00
      000754 75*0E 40         [24] 1808 	mov	(_Restart_PARM_6 + 2),#0x40
      000757 75*0Fr3B         [24] 1809 	mov	_Restart_PARM_7,#_main_negative_ans_10000_38
      00075A 75*10 00         [24] 1810 	mov	(_Restart_PARM_7 + 1),#0x00
      00075D 75*11 40         [24] 1811 	mov	(_Restart_PARM_7 + 2),#0x40
      000760 90r00r30         [24] 1812 	mov	dptr,#_main_num_1_10000_38
      000763 75 F0 40         [24] 1813 	mov	b, #0x40
      000766 12r00r00         [24] 1814 	lcall	_Restart
      000769                       1815 00121$:
                                   1816 ;	Computer.c:278: Keypad_flag = 0;
                                   1817 ;	assignBit
      000769 C2*01            [12] 1818 	clr	_Keypad_flag
      00076B                       1819 00128$:
                                   1820 ;	Computer.c:281: Show(buffer, flag);
      00076B 78r08            [12] 1821 	mov	r0,#_flag
      00076D 86*00            [24] 1822 	mov	_Show_PARM_2,@r0
      00076F 90r00r00         [24] 1823 	mov	dptr,#_buffer
      000772 75 F0 40         [24] 1824 	mov	b, #0x40
      000775 12r00r00         [24] 1825 	lcall	_Show
                                   1826 ;	Computer.c:283: }
      000778 02r04r50         [24] 1827 	ljmp	00131$
                                   1828 	.area CSEG    (CODE)
                                   1829 	.area CONST   (CODE)
                                   1830 	.area XINIT   (CODE)
                                   1831 	.area CABS    (ABS,CODE)

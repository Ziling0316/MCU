                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module Display
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CY
                                     12 	.globl _AC
                                     13 	.globl _F0
                                     14 	.globl _RS1
                                     15 	.globl _RS0
                                     16 	.globl _OV
                                     17 	.globl _F1
                                     18 	.globl _P
                                     19 	.globl _PS
                                     20 	.globl _PT1
                                     21 	.globl _PX1
                                     22 	.globl _PT0
                                     23 	.globl _PX0
                                     24 	.globl _RD
                                     25 	.globl _WR
                                     26 	.globl _T1
                                     27 	.globl _T0
                                     28 	.globl _INT1
                                     29 	.globl _INT0
                                     30 	.globl _TXD
                                     31 	.globl _RXD
                                     32 	.globl _P3_7
                                     33 	.globl _P3_6
                                     34 	.globl _P3_5
                                     35 	.globl _P3_4
                                     36 	.globl _P3_3
                                     37 	.globl _P3_2
                                     38 	.globl _P3_1
                                     39 	.globl _P3_0
                                     40 	.globl _EA
                                     41 	.globl _ES
                                     42 	.globl _ET1
                                     43 	.globl _EX1
                                     44 	.globl _ET0
                                     45 	.globl _EX0
                                     46 	.globl _P2_7
                                     47 	.globl _P2_6
                                     48 	.globl _P2_5
                                     49 	.globl _P2_4
                                     50 	.globl _P2_3
                                     51 	.globl _P2_2
                                     52 	.globl _P2_1
                                     53 	.globl _P2_0
                                     54 	.globl _SM0
                                     55 	.globl _SM1
                                     56 	.globl _SM2
                                     57 	.globl _REN
                                     58 	.globl _TB8
                                     59 	.globl _RB8
                                     60 	.globl _TI
                                     61 	.globl _RI
                                     62 	.globl _P1_7
                                     63 	.globl _P1_6
                                     64 	.globl _P1_5
                                     65 	.globl _P1_4
                                     66 	.globl _P1_3
                                     67 	.globl _P1_2
                                     68 	.globl _P1_1
                                     69 	.globl _P1_0
                                     70 	.globl _TF1
                                     71 	.globl _TR1
                                     72 	.globl _TF0
                                     73 	.globl _TR0
                                     74 	.globl _IE1
                                     75 	.globl _IT1
                                     76 	.globl _IE0
                                     77 	.globl _IT0
                                     78 	.globl _P0_7
                                     79 	.globl _P0_6
                                     80 	.globl _P0_5
                                     81 	.globl _P0_4
                                     82 	.globl _P0_3
                                     83 	.globl _P0_2
                                     84 	.globl _P0_1
                                     85 	.globl _P0_0
                                     86 	.globl _B
                                     87 	.globl _ACC
                                     88 	.globl _PSW
                                     89 	.globl _IP
                                     90 	.globl _P3
                                     91 	.globl _IE
                                     92 	.globl _P2
                                     93 	.globl _SBUF
                                     94 	.globl _SCON
                                     95 	.globl _P1
                                     96 	.globl _TH1
                                     97 	.globl _TH0
                                     98 	.globl _TL1
                                     99 	.globl _TL0
                                    100 	.globl _TMOD
                                    101 	.globl _TCON
                                    102 	.globl _PCON
                                    103 	.globl _DPH
                                    104 	.globl _DPL
                                    105 	.globl _SP
                                    106 	.globl _P0
                                    107 	.globl _Show_History_PARM_3
                                    108 	.globl _Show_History_PARM_2
                                    109 	.globl _Show_Ans_PARM_2
                                    110 	.globl _Show_PARM_2
                                    111 	.globl _numbers
                                    112 	.globl _control
                                    113 	.globl _delay
                                    114 	.globl _Show
                                    115 	.globl _Show_Ans
                                    116 	.globl _Show_History
                                    117 	.globl _Counter
                                    118 ;--------------------------------------------------------
                                    119 ; special function registers
                                    120 ;--------------------------------------------------------
                                    121 	.area RSEG    (ABS,DATA)
      000000                        122 	.org 0x0000
                           000080   123 _P0	=	0x0080
                           000081   124 _SP	=	0x0081
                           000082   125 _DPL	=	0x0082
                           000083   126 _DPH	=	0x0083
                           000087   127 _PCON	=	0x0087
                           000088   128 _TCON	=	0x0088
                           000089   129 _TMOD	=	0x0089
                           00008A   130 _TL0	=	0x008a
                           00008B   131 _TL1	=	0x008b
                           00008C   132 _TH0	=	0x008c
                           00008D   133 _TH1	=	0x008d
                           000090   134 _P1	=	0x0090
                           000098   135 _SCON	=	0x0098
                           000099   136 _SBUF	=	0x0099
                           0000A0   137 _P2	=	0x00a0
                           0000A8   138 _IE	=	0x00a8
                           0000B0   139 _P3	=	0x00b0
                           0000B8   140 _IP	=	0x00b8
                           0000D0   141 _PSW	=	0x00d0
                           0000E0   142 _ACC	=	0x00e0
                           0000F0   143 _B	=	0x00f0
                                    144 ;--------------------------------------------------------
                                    145 ; special function bits
                                    146 ;--------------------------------------------------------
                                    147 	.area RSEG    (ABS,DATA)
      000000                        148 	.org 0x0000
                           000080   149 _P0_0	=	0x0080
                           000081   150 _P0_1	=	0x0081
                           000082   151 _P0_2	=	0x0082
                           000083   152 _P0_3	=	0x0083
                           000084   153 _P0_4	=	0x0084
                           000085   154 _P0_5	=	0x0085
                           000086   155 _P0_6	=	0x0086
                           000087   156 _P0_7	=	0x0087
                           000088   157 _IT0	=	0x0088
                           000089   158 _IE0	=	0x0089
                           00008A   159 _IT1	=	0x008a
                           00008B   160 _IE1	=	0x008b
                           00008C   161 _TR0	=	0x008c
                           00008D   162 _TF0	=	0x008d
                           00008E   163 _TR1	=	0x008e
                           00008F   164 _TF1	=	0x008f
                           000090   165 _P1_0	=	0x0090
                           000091   166 _P1_1	=	0x0091
                           000092   167 _P1_2	=	0x0092
                           000093   168 _P1_3	=	0x0093
                           000094   169 _P1_4	=	0x0094
                           000095   170 _P1_5	=	0x0095
                           000096   171 _P1_6	=	0x0096
                           000097   172 _P1_7	=	0x0097
                           000098   173 _RI	=	0x0098
                           000099   174 _TI	=	0x0099
                           00009A   175 _RB8	=	0x009a
                           00009B   176 _TB8	=	0x009b
                           00009C   177 _REN	=	0x009c
                           00009D   178 _SM2	=	0x009d
                           00009E   179 _SM1	=	0x009e
                           00009F   180 _SM0	=	0x009f
                           0000A0   181 _P2_0	=	0x00a0
                           0000A1   182 _P2_1	=	0x00a1
                           0000A2   183 _P2_2	=	0x00a2
                           0000A3   184 _P2_3	=	0x00a3
                           0000A4   185 _P2_4	=	0x00a4
                           0000A5   186 _P2_5	=	0x00a5
                           0000A6   187 _P2_6	=	0x00a6
                           0000A7   188 _P2_7	=	0x00a7
                           0000A8   189 _EX0	=	0x00a8
                           0000A9   190 _ET0	=	0x00a9
                           0000AA   191 _EX1	=	0x00aa
                           0000AB   192 _ET1	=	0x00ab
                           0000AC   193 _ES	=	0x00ac
                           0000AF   194 _EA	=	0x00af
                           0000B0   195 _P3_0	=	0x00b0
                           0000B1   196 _P3_1	=	0x00b1
                           0000B2   197 _P3_2	=	0x00b2
                           0000B3   198 _P3_3	=	0x00b3
                           0000B4   199 _P3_4	=	0x00b4
                           0000B5   200 _P3_5	=	0x00b5
                           0000B6   201 _P3_6	=	0x00b6
                           0000B7   202 _P3_7	=	0x00b7
                           0000B0   203 _RXD	=	0x00b0
                           0000B1   204 _TXD	=	0x00b1
                           0000B2   205 _INT0	=	0x00b2
                           0000B3   206 _INT1	=	0x00b3
                           0000B4   207 _T0	=	0x00b4
                           0000B5   208 _T1	=	0x00b5
                           0000B6   209 _WR	=	0x00b6
                           0000B7   210 _RD	=	0x00b7
                           0000B8   211 _PX0	=	0x00b8
                           0000B9   212 _PT0	=	0x00b9
                           0000BA   213 _PX1	=	0x00ba
                           0000BB   214 _PT1	=	0x00bb
                           0000BC   215 _PS	=	0x00bc
                           0000D0   216 _P	=	0x00d0
                           0000D1   217 _F1	=	0x00d1
                           0000D2   218 _OV	=	0x00d2
                           0000D3   219 _RS0	=	0x00d3
                           0000D4   220 _RS1	=	0x00d4
                           0000D5   221 _F0	=	0x00d5
                           0000D6   222 _AC	=	0x00d6
                           0000D7   223 _CY	=	0x00d7
                                    224 ;--------------------------------------------------------
                                    225 ; overlayable register banks
                                    226 ;--------------------------------------------------------
                                    227 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        228 	.ds 8
                                    229 ;--------------------------------------------------------
                                    230 ; internal ram data
                                    231 ;--------------------------------------------------------
                                    232 	.area DSEG    (DATA)
      000000                        233 _control::
      000000                        234 	.ds 8
      000008                        235 _numbers::
      000008                        236 	.ds 17
      000019                        237 _Show_PARM_2:
      000019                        238 	.ds 1
      00001A                        239 _Show_buffer_10000_8:
      00001A                        240 	.ds 3
      00001D                        241 _Show_Ans_PARM_2:
      00001D                        242 	.ds 1
      00001E                        243 _Show_Ans_buffer_10000_14:
      00001E                        244 	.ds 3
      000021                        245 _Show_Ans_count_10000_15:
      000021                        246 	.ds 1
      000022                        247 _Show_History_PARM_2:
      000022                        248 	.ds 1
      000023                        249 _Show_History_PARM_3:
      000023                        250 	.ds 1
      000024                        251 _Show_History_buffer_10000_20:
      000024                        252 	.ds 3
      000027                        253 _Show_History_i_20000_22:
      000027                        254 	.ds 1
                                    255 ;--------------------------------------------------------
                                    256 ; overlayable items in internal ram
                                    257 ;--------------------------------------------------------
                                    258 	.area	OSEG    (OVR,DATA)
                                    259 	.area	OSEG    (OVR,DATA)
                                    260 ;--------------------------------------------------------
                                    261 ; indirectly addressable internal ram data
                                    262 ;--------------------------------------------------------
                                    263 	.area ISEG    (DATA)
                                    264 ;--------------------------------------------------------
                                    265 ; absolute internal ram data
                                    266 ;--------------------------------------------------------
                                    267 	.area IABS    (ABS,DATA)
                                    268 	.area IABS    (ABS,DATA)
                                    269 ;--------------------------------------------------------
                                    270 ; bit data
                                    271 ;--------------------------------------------------------
                                    272 	.area BSEG    (BIT)
                                    273 ;--------------------------------------------------------
                                    274 ; paged external ram data
                                    275 ;--------------------------------------------------------
                                    276 	.area PSEG    (PAG,XDATA)
                                    277 ;--------------------------------------------------------
                                    278 ; uninitialized external ram data
                                    279 ;--------------------------------------------------------
                                    280 	.area XSEG    (XDATA)
                                    281 ;--------------------------------------------------------
                                    282 ; absolute external ram data
                                    283 ;--------------------------------------------------------
                                    284 	.area XABS    (ABS,XDATA)
                                    285 ;--------------------------------------------------------
                                    286 ; initialized external ram data
                                    287 ;--------------------------------------------------------
                                    288 	.area XISEG   (XDATA)
                                    289 	.area HOME    (CODE)
                                    290 	.area GSINIT0 (CODE)
                                    291 	.area GSINIT1 (CODE)
                                    292 	.area GSINIT2 (CODE)
                                    293 	.area GSINIT3 (CODE)
                                    294 	.area GSINIT4 (CODE)
                                    295 	.area GSINIT5 (CODE)
                                    296 	.area GSINIT  (CODE)
                                    297 	.area GSFINAL (CODE)
                                    298 	.area CSEG    (CODE)
                                    299 ;--------------------------------------------------------
                                    300 ; global & static initialisations
                                    301 ;--------------------------------------------------------
                                    302 	.area HOME    (CODE)
                                    303 	.area GSINIT  (CODE)
                                    304 	.area GSFINAL (CODE)
                                    305 	.area GSINIT  (CODE)
                                    306 ;	Display.c:3: char control[8] = {0b00000111, 0b00000110, 0b00000101, 0b00000100, 0b00000011, 0b00000010, 0b00000001, 0b0000000};
      000000 75*00 07         [24]  307 	mov	_control,#0x07
      000003 75*01 06         [24]  308 	mov	(_control + 0x0001),#0x06
      000006 75*02 05         [24]  309 	mov	(_control + 0x0002),#0x05
      000009 75*03 04         [24]  310 	mov	(_control + 0x0003),#0x04
      00000C 75*04 03         [24]  311 	mov	(_control + 0x0004),#0x03
      00000F 75*05 02         [24]  312 	mov	(_control + 0x0005),#0x02
      000012 75*06 01         [24]  313 	mov	(_control + 0x0006),#0x01
      000015 75*07 00         [24]  314 	mov	(_control + 0x0007),#0x00
                                    315 ;	Display.c:4: char numbers[17] = {0b11000000, 0b11111001, 0b10100100, 0b10110000, 0b10011001, 0b10010010, 0b10000010, 0b11111000, 0b10000000, 0b10010000,
      000018 75*08 C0         [24]  316 	mov	_numbers,#0xc0
      00001B 75*09 F9         [24]  317 	mov	(_numbers + 0x0001),#0xf9
      00001E 75*0A A4         [24]  318 	mov	(_numbers + 0x0002),#0xa4
      000021 75*0B B0         [24]  319 	mov	(_numbers + 0x0003),#0xb0
      000024 75*0C 99         [24]  320 	mov	(_numbers + 0x0004),#0x99
      000027 75*0D 92         [24]  321 	mov	(_numbers + 0x0005),#0x92
      00002A 75*0E 82         [24]  322 	mov	(_numbers + 0x0006),#0x82
      00002D 75*0F F8         [24]  323 	mov	(_numbers + 0x0007),#0xf8
      000030 75*10 80         [24]  324 	mov	(_numbers + 0x0008),#0x80
      000033 75*11 90         [24]  325 	mov	(_numbers + 0x0009),#0x90
      000036 75*12 88         [24]  326 	mov	(_numbers + 0x000a),#0x88
      000039 75*13 83         [24]  327 	mov	(_numbers + 0x000b),#0x83
      00003C 75*14 88         [24]  328 	mov	(_numbers + 0x000c),#0x88
      00003F 75*15 BF         [24]  329 	mov	(_numbers + 0x000d),#0xbf
      000042 75*16 89         [24]  330 	mov	(_numbers + 0x000e),#0x89
      000045 75*17 A1         [24]  331 	mov	(_numbers + 0x000f),#0xa1
      000048 75*18 FF         [24]  332 	mov	(_numbers + 0x0010),#0xff
                                    333 ;--------------------------------------------------------
                                    334 ; Home
                                    335 ;--------------------------------------------------------
                                    336 	.area HOME    (CODE)
                                    337 	.area HOME    (CODE)
                                    338 ;--------------------------------------------------------
                                    339 ; code
                                    340 ;--------------------------------------------------------
                                    341 	.area CSEG    (CODE)
                                    342 ;------------------------------------------------------------
                                    343 ;Allocation info for local variables in function 'delay'
                                    344 ;------------------------------------------------------------
                                    345 ;i                         Allocated to registers 
                                    346 ;------------------------------------------------------------
                                    347 ;	Display.c:7: void delay(int i)
                                    348 ;	-----------------------------------------
                                    349 ;	 function delay
                                    350 ;	-----------------------------------------
      000000                        351 _delay:
                           000007   352 	ar7 = 0x07
                           000006   353 	ar6 = 0x06
                           000005   354 	ar5 = 0x05
                           000004   355 	ar4 = 0x04
                           000003   356 	ar3 = 0x03
                           000002   357 	ar2 = 0x02
                           000001   358 	ar1 = 0x01
                           000000   359 	ar0 = 0x00
      000000 AE 82            [24]  360 	mov	r6, dpl
      000002 AF 83            [24]  361 	mov	r7, dph
                                    362 ;	Display.c:9: while (i--)
      000004                        363 00101$:
      000004 8E 04            [24]  364 	mov	ar4,r6
      000006 8F 05            [24]  365 	mov	ar5,r7
      000008 1E               [12]  366 	dec	r6
      000009 BE FF 01         [24]  367 	cjne	r6,#0xff,00113$
      00000C 1F               [12]  368 	dec	r7
      00000D                        369 00113$:
      00000D EC               [12]  370 	mov	a,r4
      00000E 4D               [12]  371 	orl	a,r5
      00000F 70 F3            [24]  372 	jnz	00101$
                                    373 ;	Display.c:11: }
      000011 22               [24]  374 	ret
                                    375 ;------------------------------------------------------------
                                    376 ;Allocation info for local variables in function 'Show'
                                    377 ;------------------------------------------------------------
                                    378 ;flag                      Allocated with name '_Show_PARM_2'
                                    379 ;buffer                    Allocated with name '_Show_buffer_10000_8'
                                    380 ;i                         Allocated to registers r4 
                                    381 ;------------------------------------------------------------
                                    382 ;	Display.c:13: void Show(char *buffer, char flag)
                                    383 ;	-----------------------------------------
                                    384 ;	 function Show
                                    385 ;	-----------------------------------------
      000012                        386 _Show:
      000012 85 82*1A         [24]  387 	mov	_Show_buffer_10000_8,dpl
      000015 85 83*1B         [24]  388 	mov	(_Show_buffer_10000_8 + 1),dph
      000018 85 F0*1C         [24]  389 	mov	(_Show_buffer_10000_8 + 2),b
                                    390 ;	Display.c:15: for (char i = 0; i < 8; i++)
      00001B 7C 00            [12]  391 	mov	r4,#0x00
      00001D                        392 00106$:
      00001D BC 08 00         [24]  393 	cjne	r4,#0x08,00129$
      000020                        394 00129$:
      000020 50 5F            [24]  395 	jnc	00108$
                                    396 ;	Display.c:17: P1 = control[i];
      000022 EC               [12]  397 	mov	a,r4
      000023 24r00            [12]  398 	add	a, #_control
      000025 F9               [12]  399 	mov	r1,a
      000026 87 90            [24]  400 	mov	_P1,@r1
                                    401 ;	Display.c:18: if ((flag & (1 << i)) > 0)
      000028 8C F0            [24]  402 	mov	b,r4
      00002A 05 F0            [12]  403 	inc	b
      00002C 7A 01            [12]  404 	mov	r2,#0x01
      00002E 7B 00            [12]  405 	mov	r3,#0x00
      000030 80 06            [24]  406 	sjmp	00132$
      000032                        407 00131$:
      000032 EA               [12]  408 	mov	a,r2
      000033 2A               [12]  409 	add	a,r2
      000034 FA               [12]  410 	mov	r2,a
      000035 EB               [12]  411 	mov	a,r3
      000036 33               [12]  412 	rlc	a
      000037 FB               [12]  413 	mov	r3,a
      000038                        414 00132$:
      000038 D5 F0 F7         [24]  415 	djnz	b,00131$
      00003B AE*19            [24]  416 	mov	r6,_Show_PARM_2
      00003D 7F 00            [12]  417 	mov	r7,#0x00
      00003F EE               [12]  418 	mov	a,r6
      000040 52 02            [12]  419 	anl	ar2,a
      000042 EF               [12]  420 	mov	a,r7
      000043 52 03            [12]  421 	anl	ar3,a
      000045 C3               [12]  422 	clr	c
      000046 E4               [12]  423 	clr	a
      000047 9A               [12]  424 	subb	a,r2
      000048 74 80            [12]  425 	mov	a,#(0x00 ^ 0x80)
      00004A 8B F0            [24]  426 	mov	b,r3
      00004C 63 F0 80         [24]  427 	xrl	b,#0x80
      00004F 95 F0            [12]  428 	subb	a,b
      000051 50 1C            [24]  429 	jnc	00102$
                                    430 ;	Display.c:20: P2 = ~numbers[buffer[i]];
      000053 EC               [12]  431 	mov	a,r4
      000054 25*1A            [12]  432 	add	a, _Show_buffer_10000_8
      000056 FD               [12]  433 	mov	r5,a
      000057 E4               [12]  434 	clr	a
      000058 35*1B            [12]  435 	addc	a, (_Show_buffer_10000_8 + 1)
      00005A FE               [12]  436 	mov	r6,a
      00005B AF*1C            [24]  437 	mov	r7,(_Show_buffer_10000_8 + 2)
      00005D 8D 82            [24]  438 	mov	dpl,r5
      00005F 8E 83            [24]  439 	mov	dph,r6
      000061 8F F0            [24]  440 	mov	b,r7
      000063 12r00r00         [24]  441 	lcall	__gptrget
      000066 24r08            [12]  442 	add	a, #_numbers
      000068 F9               [12]  443 	mov	r1,a
      000069 E7               [12]  444 	mov	a,@r1
      00006A F4               [12]  445 	cpl	a
      00006B F5 A0            [12]  446 	mov	_P2,a
      00006D 80 05            [24]  447 	sjmp	00103$
      00006F                        448 00102$:
                                    449 ;	Display.c:24: P2 = ~numbers[16];
      00006F E5*18            [12]  450 	mov	a,(_numbers + 0x0010)
      000071 F4               [12]  451 	cpl	a
      000072 F5 A0            [12]  452 	mov	_P2,a
      000074                        453 00103$:
                                    454 ;	Display.c:26: delay(280);
      000074 90 01 18         [24]  455 	mov	dptr,#0x0118
      000077 C0 04            [24]  456 	push	ar4
      000079 12r00r00         [24]  457 	lcall	_delay
      00007C D0 04            [24]  458 	pop	ar4
                                    459 ;	Display.c:15: for (char i = 0; i < 8; i++)
      00007E 0C               [12]  460 	inc	r4
      00007F 80 9C            [24]  461 	sjmp	00106$
      000081                        462 00108$:
                                    463 ;	Display.c:28: }
      000081 22               [24]  464 	ret
                                    465 ;------------------------------------------------------------
                                    466 ;Allocation info for local variables in function 'Show_Ans'
                                    467 ;------------------------------------------------------------
                                    468 ;flag                      Allocated with name '_Show_Ans_PARM_2'
                                    469 ;buffer                    Allocated with name '_Show_Ans_buffer_10000_14'
                                    470 ;count                     Allocated with name '_Show_Ans_count_10000_15'
                                    471 ;i                         Allocated to registers r3 
                                    472 ;------------------------------------------------------------
                                    473 ;	Display.c:30: void Show_Ans(char *buffer, char flag)
                                    474 ;	-----------------------------------------
                                    475 ;	 function Show_Ans
                                    476 ;	-----------------------------------------
      000082                        477 _Show_Ans:
      000082 85 82*1E         [24]  478 	mov	_Show_Ans_buffer_10000_14,dpl
      000085 85 83*1F         [24]  479 	mov	(_Show_Ans_buffer_10000_14 + 1),dph
      000088 85 F0*20         [24]  480 	mov	(_Show_Ans_buffer_10000_14 + 2),b
                                    481 ;	Display.c:32: char count = Counter(flag)-1;
      00008B 85*1D 82         [24]  482 	mov	dpl, _Show_Ans_PARM_2
      00008E 12r01r77         [24]  483 	lcall	_Counter
      000091 E5 82            [12]  484 	mov	a,dpl
      000093 14               [12]  485 	dec	a
      000094 F5*21            [12]  486 	mov	_Show_Ans_count_10000_15,a
                                    487 ;	Display.c:33: for (char i = 0; i < 8; i++)
      000096 7B 00            [12]  488 	mov	r3,#0x00
      000098                        489 00106$:
      000098 BB 08 00         [24]  490 	cjne	r3,#0x08,00129$
      00009B                        491 00129$:
      00009B 50 6F            [24]  492 	jnc	00108$
                                    493 ;	Display.c:35: P1 = control[i];
      00009D EB               [12]  494 	mov	a,r3
      00009E 24r00            [12]  495 	add	a, #_control
      0000A0 F9               [12]  496 	mov	r1,a
      0000A1 87 90            [24]  497 	mov	_P1,@r1
                                    498 ;	Display.c:36: if ((flag & (1 << i)) > 0)
      0000A3 8B F0            [24]  499 	mov	b,r3
      0000A5 05 F0            [12]  500 	inc	b
      0000A7 7A 01            [12]  501 	mov	r2,#0x01
      0000A9 7C 00            [12]  502 	mov	r4,#0x00
      0000AB 80 06            [24]  503 	sjmp	00132$
      0000AD                        504 00131$:
      0000AD EA               [12]  505 	mov	a,r2
      0000AE 2A               [12]  506 	add	a,r2
      0000AF FA               [12]  507 	mov	r2,a
      0000B0 EC               [12]  508 	mov	a,r4
      0000B1 33               [12]  509 	rlc	a
      0000B2 FC               [12]  510 	mov	r4,a
      0000B3                        511 00132$:
      0000B3 D5 F0 F7         [24]  512 	djnz	b,00131$
      0000B6 AE*1D            [24]  513 	mov	r6,_Show_Ans_PARM_2
      0000B8 7F 00            [12]  514 	mov	r7,#0x00
      0000BA EE               [12]  515 	mov	a,r6
      0000BB 52 02            [12]  516 	anl	ar2,a
      0000BD EF               [12]  517 	mov	a,r7
      0000BE 52 04            [12]  518 	anl	ar4,a
      0000C0 C3               [12]  519 	clr	c
      0000C1 E4               [12]  520 	clr	a
      0000C2 9A               [12]  521 	subb	a,r2
      0000C3 74 80            [12]  522 	mov	a,#(0x00 ^ 0x80)
      0000C5 8C F0            [24]  523 	mov	b,r4
      0000C7 63 F0 80         [24]  524 	xrl	b,#0x80
      0000CA 95 F0            [12]  525 	subb	a,b
      0000CC 50 2B            [24]  526 	jnc	00102$
                                    527 ;	Display.c:38: P2 = ~numbers[buffer[count - i]];
      0000CE AC*21            [24]  528 	mov	r4,_Show_Ans_count_10000_15
      0000D0 7F 00            [12]  529 	mov	r7,#0x00
      0000D2 8B 05            [24]  530 	mov	ar5,r3
      0000D4 7E 00            [12]  531 	mov	r6,#0x00
      0000D6 EC               [12]  532 	mov	a,r4
      0000D7 C3               [12]  533 	clr	c
      0000D8 9D               [12]  534 	subb	a,r5
      0000D9 FC               [12]  535 	mov	r4,a
      0000DA EF               [12]  536 	mov	a,r7
      0000DB 9E               [12]  537 	subb	a,r6
      0000DC FF               [12]  538 	mov	r7,a
      0000DD EC               [12]  539 	mov	a,r4
      0000DE 25*1E            [12]  540 	add	a, _Show_Ans_buffer_10000_14
      0000E0 FC               [12]  541 	mov	r4,a
      0000E1 EF               [12]  542 	mov	a,r7
      0000E2 35*1F            [12]  543 	addc	a, (_Show_Ans_buffer_10000_14 + 1)
      0000E4 FF               [12]  544 	mov	r7,a
      0000E5 AE*20            [24]  545 	mov	r6,(_Show_Ans_buffer_10000_14 + 2)
      0000E7 8C 82            [24]  546 	mov	dpl,r4
      0000E9 8F 83            [24]  547 	mov	dph,r7
      0000EB 8E F0            [24]  548 	mov	b,r6
      0000ED 12r00r00         [24]  549 	lcall	__gptrget
      0000F0 24r08            [12]  550 	add	a, #_numbers
      0000F2 F9               [12]  551 	mov	r1,a
      0000F3 E7               [12]  552 	mov	a,@r1
      0000F4 F4               [12]  553 	cpl	a
      0000F5 F5 A0            [12]  554 	mov	_P2,a
      0000F7 80 05            [24]  555 	sjmp	00103$
      0000F9                        556 00102$:
                                    557 ;	Display.c:42: P2 = ~numbers[16];
      0000F9 E5*18            [12]  558 	mov	a,(_numbers + 0x0010)
      0000FB F4               [12]  559 	cpl	a
      0000FC F5 A0            [12]  560 	mov	_P2,a
      0000FE                        561 00103$:
                                    562 ;	Display.c:44: delay(280);
      0000FE 90 01 18         [24]  563 	mov	dptr,#0x0118
      000101 C0 03            [24]  564 	push	ar3
      000103 12r00r00         [24]  565 	lcall	_delay
      000106 D0 03            [24]  566 	pop	ar3
                                    567 ;	Display.c:33: for (char i = 0; i < 8; i++)
      000108 0B               [12]  568 	inc	r3
      000109 02r00r98         [24]  569 	ljmp	00106$
      00010C                        570 00108$:
                                    571 ;	Display.c:46: }
      00010C 22               [24]  572 	ret
                                    573 ;------------------------------------------------------------
                                    574 ;Allocation info for local variables in function 'Show_History'
                                    575 ;------------------------------------------------------------
                                    576 ;start                     Allocated with name '_Show_History_PARM_2'
                                    577 ;count                     Allocated with name '_Show_History_PARM_3'
                                    578 ;buffer                    Allocated with name '_Show_History_buffer_10000_20'
                                    579 ;i                         Allocated with name '_Show_History_i_20000_22'
                                    580 ;------------------------------------------------------------
                                    581 ;	Display.c:48: void Show_History(char *buffer, char start, char count)
                                    582 ;	-----------------------------------------
                                    583 ;	 function Show_History
                                    584 ;	-----------------------------------------
      00010D                        585 _Show_History:
      00010D 85 82*24         [24]  586 	mov	_Show_History_buffer_10000_20,dpl
      000110 85 83*25         [24]  587 	mov	(_Show_History_buffer_10000_20 + 1),dph
      000113 85 F0*26         [24]  588 	mov	(_Show_History_buffer_10000_20 + 2),b
                                    589 ;	Display.c:51: for (char i = 0; i < 8; i++)
      000116 75*27 00         [24]  590 	mov	_Show_History_i_20000_22,#0x00
      000119                        591 00106$:
      000119 74 F8            [12]  592 	mov	a,#0x100 - 0x08
      00011B 25*27            [12]  593 	add	a,_Show_History_i_20000_22
      00011D 40 57            [24]  594 	jc	00108$
                                    595 ;	Display.c:53: P1 = control[i];
      00011F E5*27            [12]  596 	mov	a,_Show_History_i_20000_22
      000121 24r00            [12]  597 	add	a, #_control
      000123 F9               [12]  598 	mov	r1,a
      000124 87 90            [24]  599 	mov	_P1,@r1
                                    600 ;	Display.c:54: if (i<count)
      000126 C3               [12]  601 	clr	c
      000127 E5*27            [12]  602 	mov	a,_Show_History_i_20000_22
      000129 95*23            [12]  603 	subb	a,_Show_History_PARM_3
      00012B 50 3A            [24]  604 	jnc	00102$
                                    605 ;	Display.c:56: P2 = ~numbers[buffer[start+(count-1-i)]];
      00012D AA*22            [24]  606 	mov	r2,_Show_History_PARM_2
      00012F 7B 00            [12]  607 	mov	r3,#0x00
      000131 AE*23            [24]  608 	mov	r6,_Show_History_PARM_3
      000133 7F 00            [12]  609 	mov	r7,#0x00
      000135 1E               [12]  610 	dec	r6
      000136 BE FF 01         [24]  611 	cjne	r6,#0xff,00131$
      000139 1F               [12]  612 	dec	r7
      00013A                        613 00131$:
      00013A AC*27            [24]  614 	mov	r4,_Show_History_i_20000_22
      00013C 7D 00            [12]  615 	mov	r5,#0x00
      00013E EE               [12]  616 	mov	a,r6
      00013F C3               [12]  617 	clr	c
      000140 9C               [12]  618 	subb	a,r4
      000141 FE               [12]  619 	mov	r6,a
      000142 EF               [12]  620 	mov	a,r7
      000143 9D               [12]  621 	subb	a,r5
      000144 FF               [12]  622 	mov	r7,a
      000145 EE               [12]  623 	mov	a,r6
      000146 2A               [12]  624 	add	a, r2
      000147 FA               [12]  625 	mov	r2,a
      000148 EF               [12]  626 	mov	a,r7
      000149 3B               [12]  627 	addc	a, r3
      00014A FB               [12]  628 	mov	r3,a
      00014B EA               [12]  629 	mov	a,r2
      00014C 25*24            [12]  630 	add	a, _Show_History_buffer_10000_20
      00014E FA               [12]  631 	mov	r2,a
      00014F EB               [12]  632 	mov	a,r3
      000150 35*25            [12]  633 	addc	a, (_Show_History_buffer_10000_20 + 1)
      000152 FB               [12]  634 	mov	r3,a
      000153 AF*26            [24]  635 	mov	r7,(_Show_History_buffer_10000_20 + 2)
      000155 8A 82            [24]  636 	mov	dpl,r2
      000157 8B 83            [24]  637 	mov	dph,r3
      000159 8F F0            [24]  638 	mov	b,r7
      00015B 12r00r00         [24]  639 	lcall	__gptrget
      00015E 24r08            [12]  640 	add	a, #_numbers
      000160 F9               [12]  641 	mov	r1,a
      000161 E7               [12]  642 	mov	a,@r1
      000162 F4               [12]  643 	cpl	a
      000163 F5 A0            [12]  644 	mov	_P2,a
      000165 80 05            [24]  645 	sjmp	00103$
      000167                        646 00102$:
                                    647 ;	Display.c:60: P2 = ~numbers[16];
      000167 E5*18            [12]  648 	mov	a,(_numbers + 0x0010)
      000169 F4               [12]  649 	cpl	a
      00016A F5 A0            [12]  650 	mov	_P2,a
      00016C                        651 00103$:
                                    652 ;	Display.c:62: delay(280);
      00016C 90 01 18         [24]  653 	mov	dptr,#0x0118
      00016F 12r00r00         [24]  654 	lcall	_delay
                                    655 ;	Display.c:51: for (char i = 0; i < 8; i++)
      000172 05*27            [12]  656 	inc	_Show_History_i_20000_22
      000174 80 A3            [24]  657 	sjmp	00106$
      000176                        658 00108$:
                                    659 ;	Display.c:64: }
      000176 22               [24]  660 	ret
                                    661 ;------------------------------------------------------------
                                    662 ;Allocation info for local variables in function 'Counter'
                                    663 ;------------------------------------------------------------
                                    664 ;flag                      Allocated to registers r7 
                                    665 ;count                     Allocated to registers r6 
                                    666 ;i                         Allocated to registers r5 
                                    667 ;------------------------------------------------------------
                                    668 ;	Display.c:66: char Counter(char flag)
                                    669 ;	-----------------------------------------
                                    670 ;	 function Counter
                                    671 ;	-----------------------------------------
      000177                        672 _Counter:
      000177 AF 82            [24]  673 	mov	r7, dpl
                                    674 ;	Display.c:69: for (char i = 0; i < 8; i++)
      000179 7E 00            [12]  675 	mov	r6,#0x00
      00017B 7D 00            [12]  676 	mov	r5,#0x00
      00017D                        677 00105$:
      00017D BD 08 00         [24]  678 	cjne	r5,#0x08,00128$
      000180                        679 00128$:
      000180 50 2F            [24]  680 	jnc	00103$
                                    681 ;	Display.c:71: if ((flag & (1 << i)) > 0)
      000182 8D F0            [24]  682 	mov	b,r5
      000184 05 F0            [12]  683 	inc	b
      000186 7B 01            [12]  684 	mov	r3,#0x01
      000188 7C 00            [12]  685 	mov	r4,#0x00
      00018A 80 06            [24]  686 	sjmp	00131$
      00018C                        687 00130$:
      00018C EB               [12]  688 	mov	a,r3
      00018D 2B               [12]  689 	add	a,r3
      00018E FB               [12]  690 	mov	r3,a
      00018F EC               [12]  691 	mov	a,r4
      000190 33               [12]  692 	rlc	a
      000191 FC               [12]  693 	mov	r4,a
      000192                        694 00131$:
      000192 D5 F0 F7         [24]  695 	djnz	b,00130$
      000195 8F 01            [24]  696 	mov	ar1,r7
      000197 7A 00            [12]  697 	mov	r2,#0x00
      000199 E9               [12]  698 	mov	a,r1
      00019A 52 03            [12]  699 	anl	ar3,a
      00019C EA               [12]  700 	mov	a,r2
      00019D 52 04            [12]  701 	anl	ar4,a
      00019F C3               [12]  702 	clr	c
      0001A0 E4               [12]  703 	clr	a
      0001A1 9B               [12]  704 	subb	a,r3
      0001A2 74 80            [12]  705 	mov	a,#(0x00 ^ 0x80)
      0001A4 8C F0            [24]  706 	mov	b,r4
      0001A6 63 F0 80         [24]  707 	xrl	b,#0x80
      0001A9 95 F0            [12]  708 	subb	a,b
      0001AB 50 01            [24]  709 	jnc	00106$
                                    710 ;	Display.c:73: count++;
      0001AD 0E               [12]  711 	inc	r6
      0001AE                        712 00106$:
                                    713 ;	Display.c:69: for (char i = 0; i < 8; i++)
      0001AE 0D               [12]  714 	inc	r5
      0001AF 80 CC            [24]  715 	sjmp	00105$
      0001B1                        716 00103$:
                                    717 ;	Display.c:76: return count;
      0001B1 8E 82            [24]  718 	mov	dpl, r6
                                    719 ;	Display.c:77: }
      0001B3 22               [24]  720 	ret
                                    721 	.area CSEG    (CODE)
                                    722 	.area CONST   (CODE)
                                    723 	.area XINIT   (CODE)
                                    724 	.area CABS    (ABS,CODE)
